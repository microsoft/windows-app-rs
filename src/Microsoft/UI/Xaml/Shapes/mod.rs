#![allow(
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    clashing_extern_declarations,
    clippy::all
)]
#[doc = "*Required features: 'UI_Xaml_Shapes'*"]
#[repr(transparent)]
pub struct Ellipse(::windows::core::IUnknown);
impl Ellipse {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.activate_instance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IActivationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<
            Ellipse,
            ::windows::core::IActivationFactory,
        > = ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn PopulatePropertyInfo<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>,
        Param1: ::windows::core::IntoParam<'a, super::super::Composition::AnimationPropertyInfo>,
    >(
        &self,
        propertyname: Param0,
        propertyinfo: Param1,
    ) -> ::windows::core::Result<()> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).PopulatePropertyInfo)(
                ::core::mem::transmute_copy(this),
                propertyname.into_param().abi(),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        dp: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ClearValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ClearValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReadLocalValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ReadLocalValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetAnimationBaseValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAnimationBaseValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RegisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::DependencyPropertyChangedCallback>,
    >(
        &self,
        dp: Param0,
        callback: Param1,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: i64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi::<i64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UnregisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Dispatcher)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Dispatching'*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DispatcherQueue)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Triggers(&self) -> ::windows::core::Result<super::TriggerCollection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Triggers)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::TriggerCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Resources(&self) -> ::windows::core::Result<super::ResourceDictionary> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Resources)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ResourceDictionary>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetResources<'a, Param0: ::windows::core::IntoParam<'a, super::ResourceDictionary>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetResources)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Tag(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTag<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTag)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Language(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Language)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetLanguage<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetLanguage)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Width(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Width)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Height(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Height)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HorizontalAlignment(&self) -> ::windows::core::Result<super::HorizontalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::HorizontalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::HorizontalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn VerticalAlignment(&self) -> ::windows::core::Result<super::VerticalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::VerticalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).VerticalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::VerticalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVerticalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Margin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Margin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Name)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetName)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BaseUri(&self) -> ::windows::core::Result<::windows::Foundation::Uri> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BaseUri)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Uri>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContext(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContext)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetDataContext<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetDataContext)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusOnInteraction(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualMargin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualSecondaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualPrimaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusWhenDisabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Style(&self) -> ::windows::core::Result<super::Style> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Style)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Style>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStyle<'a, Param0: ::windows::core::IntoParam<'a, super::Style>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStyle)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Parent(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Parent)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FlowDirection(&self) -> ::windows::core::Result<super::FlowDirection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::FlowDirection = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FlowDirection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FlowDirection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFlowDirection)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RequestedTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RequestedTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRequestedTheme)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsLoaded(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsLoaded)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Unloaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Unloaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveUnloaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveUnloaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContextChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDataContextChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::SizeChangedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).SizeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveSizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveSizeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::EventHandler<::windows::core::IInspectable>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LayoutUpdated)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loading)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoading)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn EffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).EffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveEffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FindName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FindName)(
                ::core::mem::transmute_copy(this),
                name.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::Data::BindingBase>,
    >(
        &self,
        dp: Param0,
        binding: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetBinding)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                binding.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<super::Data::BindingExpression> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetBindingExpression)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Data::BindingExpression>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateViewport(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateViewport)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Fill)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFill)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stroke(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stroke)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStroke<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStroke)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeMiterLimit(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeThickness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeThickness)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeStartLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeStartLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeEndLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeEndLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<super::Media::PenLineJoin> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineJoin = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineJoin>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeLineJoin(
        &self,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeDashOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashCap(&self, value: super::Media::PenLineCap) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<super::Media::DoubleCollection> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArray)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::DoubleCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashArray<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::DoubleCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashArray)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> ::windows::core::Result<super::Media::Stretch> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::Stretch = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stretch)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Stretch>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStretch)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn GeometryTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GeometryTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetAlphaMask(
        &self,
    ) -> ::windows::core::Result<super::super::Composition::CompositionBrush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAlphaMask)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::CompositionBrush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DesiredSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DesiredSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowDrop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowDrop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowDrop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowDrop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Opacity(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Opacity)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacity(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacity)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows::core::Result<super::Media::RectangleGeometry> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Clip)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::RectangleGeometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<'a, Param0: ::windows::core::IntoParam<'a, super::Media::RectangleGeometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetClip)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Transform>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransform)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows::core::Result<super::Media::Projection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Projection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Projection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Projection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProjection)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows::core::Result<super::Media::Media3D::Transform3D> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transform3D)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Media3D::Transform3D>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Media3D::Transform3D>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransform3D)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderTransformOrigin(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Point = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRenderTransformOrigin<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Point>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Visibility(&self) -> ::windows::core::Result<super::Visibility> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Visibility = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Visibility)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Visibility>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVisibility)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseLayoutRounding(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> ::windows::core::Result<super::Media::Animation::TransitionCollection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transitions)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Animation::TransitionCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Animation::TransitionCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransitions)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows::core::Result<super::Media::CacheMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CacheMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::CacheMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<'a, Param0: ::windows::core::IntoParam<'a, super::Media::CacheMode>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCacheMode)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsDoubleTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanDrag(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanDrag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanDrag(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanDrag)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsRightTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHoldingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows::core::Result<super::Input::ManipulationModes> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::ManipulationModes = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::ManipulationModes>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetManipulationMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<super::Input::Pointer>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptures)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<super::Input::Pointer>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(
        &self,
    ) -> ::windows::core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextFlyout)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Controls::Primitives::FlyoutBase>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Controls::Primitives::FlyoutBase>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetContextFlyout)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows::core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Media::ElementCompositeMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CompositeMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::ElementCompositeMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCompositeMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>
    {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Lights)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanBeScrollAnchor(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsAccessKeyScope(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKeyScopeOwner(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKeyScopeOwner<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKey(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKey)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKey<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKey)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyTipPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyTipPlacementMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyTipPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipTarget(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipTarget<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusKeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusKeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector<super::Input::KeyboardAccelerator>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<
                super::Input::KeyboardAccelerator,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyboardAcceleratorPlacementTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardAcceleratorPlacementMode =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardAcceleratorPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows::core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::ElementHighContrastAdjustment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementHighContrastAdjustment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn OpacityTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).OpacityTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacityTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacityTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Translation(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Translation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslation<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslation)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TranslationTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TranslationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Rotation(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Rotation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Scale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScale<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScale)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ScaleTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ScaleTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScaleTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScaleTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Matrix4x4 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformMatrix)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTransformMatrix<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Matrix4x4>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransformMatrix)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CenterPoint)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCenterPoint<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCenterPoint)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationAxis)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationAxis<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationAxis)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector2 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XamlRoot(&self) -> ::windows::core::Result<super::XamlRoot> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XamlRoot)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::XamlRoot>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXamlRoot<'a, Param0: ::windows::core::IntoParam<'a, super::XamlRoot>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXamlRoot)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows::core::Result<super::Media::Shadow> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Shadow)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Shadow>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Shadow>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetShadow)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RasterizationScale(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RasterizationScale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRasterizationScale)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusState(&self) -> ::windows::core::Result<super::FocusState> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::FocusState = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusState)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FocusState>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseSystemFocusVisuals(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusLeft(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeft)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusLeft<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeft)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusRight(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusRight<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRight)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusUp(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUp)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusUp<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUp)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusDown(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDown)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusDown<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDown)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTabStop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTabStop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTabStop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTabStop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TabIndex(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: i32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabIndex)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<i32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTabIndex(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabIndex)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GotFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GotFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGotFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LostFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LostFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLostFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DropCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDropCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CharacterReceived)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveCharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveCharacterReceived)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragEnter<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragEnter)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragEnter<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragEnter)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragLeave<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragLeave)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragLeave<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragLeave)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragOver<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragOver)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragOver<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragOver)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Drop<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Drop)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDrop<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDrop)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerPressed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerPressed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerMoved)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerMoved)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerReleased)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerReleased)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerEntered)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerEntered)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerExited)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerExited)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<'a, Param0: ::windows::core::IntoParam<'a, super::Input::TappedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::DoubleTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DoubleTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDoubleTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::HoldingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Holding)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHolding<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHolding)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::RightTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RightTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveRightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveRightTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationInertiaStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationDeltaEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationDelta)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationDelta)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationCompletedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GettingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGettingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LosingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLosingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).NoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveNoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveBringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Measure<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Size>>(
        &self,
        availablesize: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Measure)(
                ::core::mem::transmute_copy(this),
                availablesize.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Arrange<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Rect>>(
        &self,
        finalrect: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Arrange)(
                ::core::mem::transmute_copy(this),
                finalrect.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<'a, Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CapturePointer)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCapture)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReleasePointerCaptures(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCaptures)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AddHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
        handledeventstoo: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).AddHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<'a, Param0: ::windows::core::IntoParam<'a, super::UIElement>>(
        &self,
        visual: Param0,
    ) -> ::windows::core::Result<super::Media::GeneralTransform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformToVisual)(
                ::core::mem::transmute_copy(this),
                visual.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Media::GeneralTransform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateMeasure(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateMeasure)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateArrange(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateArrange)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UpdateLayout(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UpdateLayout)(::core::mem::transmute_copy(
                this,
            ))
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CancelDirectManipulations(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CancelDirectManipulations)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::PointerPoint>,
    >(
        &self,
        pointerpoint: Param0,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StartDragAsync)(
                ::core::mem::transmute_copy(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<
                ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoView(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoView)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoViewWithOptions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::BringIntoViewOptions>,
    >(
        &self,
        options: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::core::mem::transmute_copy(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ProcessKeyboardAcceleratorEventArgs>,
    >(
        &self,
        args: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::core::mem::transmute_copy(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Focus(&self, value: super::FocusState) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Focus)(
                ::core::mem::transmute_copy(this),
                value,
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StartAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StopAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StopAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows::core::Result<super::super::Input::InputCursor> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProtectedCursor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Input::InputCursor>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::InputCursor>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProtectedCursor)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<super::super::Composition::Visual> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetVisualInternal)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::Visual>(result__)
        }
    }
}
impl ::core::clone::Clone for Ellipse {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Ellipse {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Ellipse {}
impl ::core::fmt::Debug for Ellipse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Ellipse").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Ellipse {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Shapes.Ellipse;{805c39aa-fa8a-5e0b-9847-4ab81b42a3df})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Interface for Ellipse {
    type Vtable = IEllipse_Vtbl;
    const IID: ::windows::core::GUID = <IEllipse as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Ellipse {
    const NAME: &'static str = "Microsoft.UI.Xaml.Shapes.Ellipse";
}
impl ::core::convert::From<Ellipse> for ::windows::core::IUnknown {
    fn from(value: Ellipse) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Ellipse> for ::windows::core::IUnknown {
    fn from(value: &Ellipse) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &'a Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<Ellipse> for ::windows::core::IInspectable {
    fn from(value: Ellipse) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Ellipse> for ::windows::core::IInspectable {
    fn from(value: &Ellipse) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for &'a Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Ellipse> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Ellipse) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Ellipse> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Ellipse) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for &Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::core::convert::TryInto::<super::super::Composition::IAnimationObject>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Ellipse> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: Ellipse) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Ellipse> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: &Ellipse) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for &Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Ellipse> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: Ellipse) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Ellipse> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: &Ellipse) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for &Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement2>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
impl ::core::convert::From<Ellipse> for Shape {
    fn from(value: Ellipse) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Ellipse> for Shape {
    fn from(value: &Ellipse) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for &Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::Param::Owned(::core::convert::Into::<Shape>::into(self))
    }
}
impl ::core::convert::From<Ellipse> for super::FrameworkElement {
    fn from(value: Ellipse) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Ellipse> for super::FrameworkElement {
    fn from(value: &Ellipse) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for &Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::FrameworkElement>::into(self))
    }
}
impl ::core::convert::From<Ellipse> for super::UIElement {
    fn from(value: Ellipse) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Ellipse> for super::UIElement {
    fn from(value: &Ellipse) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for &Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::UIElement>::into(self))
    }
}
impl ::core::convert::From<Ellipse> for super::DependencyObject {
    fn from(value: Ellipse) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Ellipse> for super::DependencyObject {
    fn from(value: &Ellipse) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for &Ellipse {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::DependencyObject>::into(self))
    }
}
unsafe impl ::core::marker::Send for Ellipse {}
unsafe impl ::core::marker::Sync for Ellipse {}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEllipse(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IEllipse {
    type Vtable = IEllipse_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x805c39aa_fa8a_5e0b_9847_4ab81b42a3df);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEllipse_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILine(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for ILine {
    type Vtable = ILine_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x507b3858_af7e_559b_a87e_4cc6a5d8ba96);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILine_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub X1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetX1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub Y1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetY1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub X2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetX2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub Y2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetY2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILineStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for ILineStatics {
    type Vtable = ILineStatics_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa425bf93_f1f3_5dcb_997e_b6a26f7ae8c0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILineStatics_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub X1Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Y1Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub X2Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Y2Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPath(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IPath {
    type Vtable = IPath_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x757d1cd8_0ec0_55c5_b400_66657e493e78);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPath_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    #[cfg(feature = "UI_Xaml_Media")]
    pub Data: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    Data: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetData: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetData: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IPathFactory {
    type Vtable = IPathFactory_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5e82e4c9_7502_5b1f_b940_c3346a71362a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathFactory_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IPathStatics {
    type Vtable = IPathStatics_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2146d36f_721c_5b54_af7d_60f3adc4fbca);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathStatics_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub DataProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPolygon(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IPolygon {
    type Vtable = IPolygon_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xfa126347_d1d4_54dd_b1a4_c35019397944);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPolygon_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    #[cfg(feature = "UI_Xaml_Media")]
    pub FillRule: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::FillRule,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    FillRule: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetFillRule: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::FillRule,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetFillRule: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub Points: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    Points: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetPoints: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetPoints: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPolygonStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IPolygonStatics {
    type Vtable = IPolygonStatics_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x85ddbada_9e37_5971_a9aa_dce31f9cf67a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPolygonStatics_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub FillRuleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub PointsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPolyline(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IPolyline {
    type Vtable = IPolyline_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc7f0bec6_184c_5d96_8102_04dd211e100c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPolyline_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    #[cfg(feature = "UI_Xaml_Media")]
    pub FillRule: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::FillRule,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    FillRule: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetFillRule: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::FillRule,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetFillRule: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub Points: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    Points: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetPoints: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetPoints: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPolylineStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IPolylineStatics {
    type Vtable = IPolylineStatics_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x48840fe7_d735_5080_9c6d_2862665cdda0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPolylineStatics_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub FillRuleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub PointsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRectangle(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IRectangle {
    type Vtable = IRectangle_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbf7d30b9_152c_556e_9f10_d0b7eba4e52f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRectangle_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub RadiusX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetRadiusX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub RadiusY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetRadiusY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRectangleStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IRectangleStatics {
    type Vtable = IRectangleStatics_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3cc3cc79_c332_5ad0_8743_1f1b1e670a86);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRectangleStatics_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub RadiusXProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub RadiusYProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IShape(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IShape {
    type Vtable = IShape_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9941aad3_6af2_5ba2_9085_8506d5f2485e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShape_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    #[cfg(feature = "UI_Xaml_Media")]
    pub Fill: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    Fill: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetFill: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetFill: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub Stroke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    Stroke: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStroke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStroke: usize,
    pub StrokeMiterLimit: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeMiterLimit: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub StrokeThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media")]
    pub StrokeStartLineCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::PenLineCap,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    StrokeStartLineCap: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStrokeStartLineCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStrokeStartLineCap: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub StrokeEndLineCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::PenLineCap,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    StrokeEndLineCap: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStrokeEndLineCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStrokeEndLineCap: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub StrokeLineJoin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::PenLineJoin,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    StrokeLineJoin: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStrokeLineJoin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStrokeLineJoin: usize,
    pub StrokeDashOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeDashOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Xaml_Media")]
    pub StrokeDashCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::PenLineCap,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    StrokeDashCap: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStrokeDashCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStrokeDashCap: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub StrokeDashArray: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    StrokeDashArray: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStrokeDashArray: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStrokeDashArray: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::Media::Stretch,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    Stretch: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::Media::Stretch,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    SetStretch: usize,
    #[cfg(feature = "UI_Xaml_Media")]
    pub GeometryTransform: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Media"))]
    GeometryTransform: usize,
    #[cfg(feature = "UI_Composition")]
    pub GetAlphaMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    GetAlphaMask: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IShapeFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IShapeFactory {
    type Vtable = IShapeFactory_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4fecafaf_8265_5252_ba5c_f43639f974a5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShapeFactory_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IShapeStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Interface for IShapeStatics {
    type Vtable = IShapeStatics_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xea407c43_8a09_587a_958a_4dd17d217ce1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShapeStatics_Vtbl {
    pub base: ::windows::core::IInspectableVtbl,
    pub FillProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeMiterLimitProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeStartLineCapProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeEndLineCapProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeLineJoinProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeDashOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeDashCapProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StrokeDashArrayProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StretchProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: 'UI_Xaml_Shapes'*"]
#[repr(transparent)]
pub struct Line(::windows::core::IUnknown);
impl Line {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.activate_instance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IActivationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<
            Line,
            ::windows::core::IActivationFactory,
        > = ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn PopulatePropertyInfo<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>,
        Param1: ::windows::core::IntoParam<'a, super::super::Composition::AnimationPropertyInfo>,
    >(
        &self,
        propertyname: Param0,
        propertyinfo: Param1,
    ) -> ::windows::core::Result<()> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).PopulatePropertyInfo)(
                ::core::mem::transmute_copy(this),
                propertyname.into_param().abi(),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        dp: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ClearValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ClearValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReadLocalValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ReadLocalValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetAnimationBaseValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAnimationBaseValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RegisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::DependencyPropertyChangedCallback>,
    >(
        &self,
        dp: Param0,
        callback: Param1,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: i64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi::<i64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UnregisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Dispatcher)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Dispatching'*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DispatcherQueue)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Triggers(&self) -> ::windows::core::Result<super::TriggerCollection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Triggers)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::TriggerCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Resources(&self) -> ::windows::core::Result<super::ResourceDictionary> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Resources)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ResourceDictionary>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetResources<'a, Param0: ::windows::core::IntoParam<'a, super::ResourceDictionary>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetResources)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Tag(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTag<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTag)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Language(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Language)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetLanguage<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetLanguage)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Width(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Width)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Height(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Height)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HorizontalAlignment(&self) -> ::windows::core::Result<super::HorizontalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::HorizontalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::HorizontalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn VerticalAlignment(&self) -> ::windows::core::Result<super::VerticalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::VerticalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).VerticalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::VerticalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVerticalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Margin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Margin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Name)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetName)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BaseUri(&self) -> ::windows::core::Result<::windows::Foundation::Uri> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BaseUri)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Uri>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContext(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContext)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetDataContext<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetDataContext)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusOnInteraction(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualMargin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualSecondaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualPrimaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusWhenDisabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Style(&self) -> ::windows::core::Result<super::Style> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Style)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Style>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStyle<'a, Param0: ::windows::core::IntoParam<'a, super::Style>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStyle)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Parent(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Parent)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FlowDirection(&self) -> ::windows::core::Result<super::FlowDirection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::FlowDirection = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FlowDirection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FlowDirection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFlowDirection)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RequestedTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RequestedTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRequestedTheme)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsLoaded(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsLoaded)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Unloaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Unloaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveUnloaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveUnloaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContextChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDataContextChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::SizeChangedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).SizeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveSizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveSizeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::EventHandler<::windows::core::IInspectable>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LayoutUpdated)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loading)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoading)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn EffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).EffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveEffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FindName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FindName)(
                ::core::mem::transmute_copy(this),
                name.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::Data::BindingBase>,
    >(
        &self,
        dp: Param0,
        binding: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetBinding)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                binding.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<super::Data::BindingExpression> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetBindingExpression)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Data::BindingExpression>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateViewport(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateViewport)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn X1(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).X1)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetX1(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetX1)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Y1(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Y1)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetY1(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetY1)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn X2(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).X2)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetX2(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetX2)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Y2(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Y2)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetY2(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetY2)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn X1Property() -> ::windows::core::Result<super::DependencyProperty> {
        Self::ILineStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).X1Property)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Y1Property() -> ::windows::core::Result<super::DependencyProperty> {
        Self::ILineStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Y1Property)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn X2Property() -> ::windows::core::Result<super::DependencyProperty> {
        Self::ILineStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).X2Property)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Y2Property() -> ::windows::core::Result<super::DependencyProperty> {
        Self::ILineStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Y2Property)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Fill)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFill)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stroke(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stroke)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStroke<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStroke)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeMiterLimit(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeThickness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeThickness)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeStartLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeStartLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeEndLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeEndLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<super::Media::PenLineJoin> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineJoin = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineJoin>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeLineJoin(
        &self,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeDashOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashCap(&self, value: super::Media::PenLineCap) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<super::Media::DoubleCollection> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArray)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::DoubleCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashArray<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::DoubleCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashArray)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> ::windows::core::Result<super::Media::Stretch> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::Stretch = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stretch)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Stretch>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStretch)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn GeometryTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GeometryTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetAlphaMask(
        &self,
    ) -> ::windows::core::Result<super::super::Composition::CompositionBrush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAlphaMask)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::CompositionBrush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DesiredSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DesiredSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowDrop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowDrop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowDrop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowDrop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Opacity(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Opacity)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacity(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacity)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows::core::Result<super::Media::RectangleGeometry> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Clip)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::RectangleGeometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<'a, Param0: ::windows::core::IntoParam<'a, super::Media::RectangleGeometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetClip)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Transform>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransform)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows::core::Result<super::Media::Projection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Projection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Projection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Projection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProjection)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows::core::Result<super::Media::Media3D::Transform3D> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transform3D)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Media3D::Transform3D>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Media3D::Transform3D>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransform3D)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderTransformOrigin(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Point = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRenderTransformOrigin<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Point>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Visibility(&self) -> ::windows::core::Result<super::Visibility> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Visibility = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Visibility)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Visibility>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVisibility)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseLayoutRounding(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> ::windows::core::Result<super::Media::Animation::TransitionCollection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transitions)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Animation::TransitionCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Animation::TransitionCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransitions)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows::core::Result<super::Media::CacheMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CacheMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::CacheMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<'a, Param0: ::windows::core::IntoParam<'a, super::Media::CacheMode>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCacheMode)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsDoubleTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanDrag(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanDrag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanDrag(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanDrag)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsRightTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHoldingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows::core::Result<super::Input::ManipulationModes> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::ManipulationModes = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::ManipulationModes>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetManipulationMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<super::Input::Pointer>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptures)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<super::Input::Pointer>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(
        &self,
    ) -> ::windows::core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextFlyout)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Controls::Primitives::FlyoutBase>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Controls::Primitives::FlyoutBase>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetContextFlyout)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows::core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Media::ElementCompositeMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CompositeMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::ElementCompositeMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCompositeMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>
    {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Lights)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanBeScrollAnchor(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsAccessKeyScope(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKeyScopeOwner(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKeyScopeOwner<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKey(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKey)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKey<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKey)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyTipPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyTipPlacementMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyTipPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipTarget(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipTarget<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusKeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusKeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector<super::Input::KeyboardAccelerator>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<
                super::Input::KeyboardAccelerator,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyboardAcceleratorPlacementTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardAcceleratorPlacementMode =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardAcceleratorPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows::core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::ElementHighContrastAdjustment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementHighContrastAdjustment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn OpacityTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).OpacityTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacityTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacityTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Translation(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Translation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslation<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslation)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TranslationTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TranslationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Rotation(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Rotation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Scale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScale<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScale)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ScaleTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ScaleTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScaleTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScaleTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Matrix4x4 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformMatrix)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTransformMatrix<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Matrix4x4>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransformMatrix)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CenterPoint)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCenterPoint<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCenterPoint)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationAxis)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationAxis<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationAxis)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector2 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XamlRoot(&self) -> ::windows::core::Result<super::XamlRoot> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XamlRoot)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::XamlRoot>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXamlRoot<'a, Param0: ::windows::core::IntoParam<'a, super::XamlRoot>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXamlRoot)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows::core::Result<super::Media::Shadow> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Shadow)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Shadow>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Shadow>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetShadow)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RasterizationScale(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RasterizationScale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRasterizationScale)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusState(&self) -> ::windows::core::Result<super::FocusState> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::FocusState = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusState)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FocusState>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseSystemFocusVisuals(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusLeft(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeft)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusLeft<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeft)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusRight(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusRight<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRight)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusUp(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUp)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusUp<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUp)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusDown(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDown)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusDown<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDown)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTabStop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTabStop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTabStop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTabStop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TabIndex(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: i32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabIndex)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<i32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTabIndex(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabIndex)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GotFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GotFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGotFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LostFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LostFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLostFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DropCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDropCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CharacterReceived)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveCharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveCharacterReceived)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragEnter<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragEnter)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragEnter<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragEnter)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragLeave<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragLeave)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragLeave<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragLeave)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragOver<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragOver)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragOver<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragOver)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Drop<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Drop)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDrop<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDrop)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerPressed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerPressed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerMoved)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerMoved)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerReleased)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerReleased)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerEntered)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerEntered)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerExited)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerExited)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<'a, Param0: ::windows::core::IntoParam<'a, super::Input::TappedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::DoubleTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DoubleTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDoubleTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::HoldingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Holding)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHolding<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHolding)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::RightTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RightTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveRightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveRightTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationInertiaStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationDeltaEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationDelta)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationDelta)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationCompletedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GettingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGettingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LosingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLosingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).NoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveNoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveBringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Measure<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Size>>(
        &self,
        availablesize: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Measure)(
                ::core::mem::transmute_copy(this),
                availablesize.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Arrange<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Rect>>(
        &self,
        finalrect: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Arrange)(
                ::core::mem::transmute_copy(this),
                finalrect.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<'a, Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CapturePointer)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCapture)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReleasePointerCaptures(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCaptures)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AddHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
        handledeventstoo: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).AddHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<'a, Param0: ::windows::core::IntoParam<'a, super::UIElement>>(
        &self,
        visual: Param0,
    ) -> ::windows::core::Result<super::Media::GeneralTransform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformToVisual)(
                ::core::mem::transmute_copy(this),
                visual.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Media::GeneralTransform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateMeasure(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateMeasure)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateArrange(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateArrange)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UpdateLayout(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UpdateLayout)(::core::mem::transmute_copy(
                this,
            ))
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CancelDirectManipulations(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CancelDirectManipulations)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::PointerPoint>,
    >(
        &self,
        pointerpoint: Param0,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StartDragAsync)(
                ::core::mem::transmute_copy(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<
                ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoView(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoView)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoViewWithOptions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::BringIntoViewOptions>,
    >(
        &self,
        options: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::core::mem::transmute_copy(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ProcessKeyboardAcceleratorEventArgs>,
    >(
        &self,
        args: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::core::mem::transmute_copy(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Focus(&self, value: super::FocusState) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Focus)(
                ::core::mem::transmute_copy(this),
                value,
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StartAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StopAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StopAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows::core::Result<super::super::Input::InputCursor> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProtectedCursor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Input::InputCursor>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::InputCursor>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProtectedCursor)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<super::super::Composition::Visual> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetVisualInternal)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::Visual>(result__)
        }
    }
    #[doc(hidden)]
    pub fn ILineStatics<R, F: FnOnce(&ILineStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<Line, ILineStatics> =
            ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
}
impl ::core::clone::Clone for Line {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Line {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Line {}
impl ::core::fmt::Debug for Line {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Line").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Line {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Shapes.Line;{507b3858-af7e-559b-a87e-4cc6a5d8ba96})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Interface for Line {
    type Vtable = ILine_Vtbl;
    const IID: ::windows::core::GUID = <ILine as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Line {
    const NAME: &'static str = "Microsoft.UI.Xaml.Shapes.Line";
}
impl ::core::convert::From<Line> for ::windows::core::IUnknown {
    fn from(value: Line) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Line> for ::windows::core::IUnknown {
    fn from(value: &Line) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &'a Line {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<Line> for ::windows::core::IInspectable {
    fn from(value: Line) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Line> for ::windows::core::IInspectable {
    fn from(value: &Line) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for &'a Line {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Line> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Line) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Line> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Line) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for &Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::core::convert::TryInto::<super::super::Composition::IAnimationObject>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Line> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: Line) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Line> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: &Line) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for &Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Line> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: Line) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Line> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: &Line) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for &Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement2>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
impl ::core::convert::From<Line> for Shape {
    fn from(value: Line) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Line> for Shape {
    fn from(value: &Line) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for &Line {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::Param::Owned(::core::convert::Into::<Shape>::into(self))
    }
}
impl ::core::convert::From<Line> for super::FrameworkElement {
    fn from(value: Line) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Line> for super::FrameworkElement {
    fn from(value: &Line) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for &Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::FrameworkElement>::into(self))
    }
}
impl ::core::convert::From<Line> for super::UIElement {
    fn from(value: Line) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Line> for super::UIElement {
    fn from(value: &Line) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for &Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::UIElement>::into(self))
    }
}
impl ::core::convert::From<Line> for super::DependencyObject {
    fn from(value: Line) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Line> for super::DependencyObject {
    fn from(value: &Line) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for &Line {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::DependencyObject>::into(self))
    }
}
unsafe impl ::core::marker::Send for Line {}
unsafe impl ::core::marker::Sync for Line {}
#[doc = "*Required features: 'UI_Xaml_Shapes'*"]
#[repr(transparent)]
pub struct Path(::windows::core::IUnknown);
impl Path {
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn PopulatePropertyInfo<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>,
        Param1: ::windows::core::IntoParam<'a, super::super::Composition::AnimationPropertyInfo>,
    >(
        &self,
        propertyname: Param0,
        propertyinfo: Param1,
    ) -> ::windows::core::Result<()> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).PopulatePropertyInfo)(
                ::core::mem::transmute_copy(this),
                propertyname.into_param().abi(),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        dp: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ClearValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ClearValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReadLocalValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ReadLocalValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetAnimationBaseValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAnimationBaseValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RegisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::DependencyPropertyChangedCallback>,
    >(
        &self,
        dp: Param0,
        callback: Param1,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: i64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi::<i64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UnregisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Dispatcher)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Dispatching'*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DispatcherQueue)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Triggers(&self) -> ::windows::core::Result<super::TriggerCollection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Triggers)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::TriggerCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Resources(&self) -> ::windows::core::Result<super::ResourceDictionary> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Resources)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ResourceDictionary>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetResources<'a, Param0: ::windows::core::IntoParam<'a, super::ResourceDictionary>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetResources)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Tag(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTag<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTag)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Language(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Language)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetLanguage<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetLanguage)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Width(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Width)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Height(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Height)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HorizontalAlignment(&self) -> ::windows::core::Result<super::HorizontalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::HorizontalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::HorizontalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn VerticalAlignment(&self) -> ::windows::core::Result<super::VerticalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::VerticalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).VerticalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::VerticalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVerticalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Margin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Margin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Name)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetName)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BaseUri(&self) -> ::windows::core::Result<::windows::Foundation::Uri> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BaseUri)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Uri>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContext(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContext)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetDataContext<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetDataContext)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusOnInteraction(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualMargin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualSecondaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualPrimaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusWhenDisabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Style(&self) -> ::windows::core::Result<super::Style> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Style)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Style>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStyle<'a, Param0: ::windows::core::IntoParam<'a, super::Style>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStyle)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Parent(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Parent)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FlowDirection(&self) -> ::windows::core::Result<super::FlowDirection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::FlowDirection = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FlowDirection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FlowDirection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFlowDirection)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RequestedTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RequestedTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRequestedTheme)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsLoaded(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsLoaded)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Unloaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Unloaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveUnloaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveUnloaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContextChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDataContextChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::SizeChangedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).SizeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveSizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveSizeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::EventHandler<::windows::core::IInspectable>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LayoutUpdated)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loading)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoading)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn EffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).EffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveEffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FindName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FindName)(
                ::core::mem::transmute_copy(this),
                name.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::Data::BindingBase>,
    >(
        &self,
        dp: Param0,
        binding: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetBinding)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                binding.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<super::Data::BindingExpression> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetBindingExpression)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Data::BindingExpression>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateViewport(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateViewport)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Data(&self) -> ::windows::core::Result<super::Media::Geometry> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Data)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Geometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetData<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Geometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetData)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn new() -> ::windows::core::Result<Path> {
        Self::IPathFactory(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CreateInstance)(
                ::core::mem::transmute_copy(this),
                ::core::ptr::null_mut(),
                &mut ::core::option::Option::<::windows::core::IInspectable>::None as *mut _ as _,
                &mut result__,
            )
            .from_abi::<Path>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn compose<T: ::windows::core::Compose>(compose: T) -> ::windows::core::Result<Path> {
        Self::IPathFactory(|this| unsafe {
            let (derived__, base__) = ::windows::core::Compose::compose(compose);
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CreateInstance)(
                ::core::mem::transmute_copy(this),
                ::core::mem::transmute_copy(&derived__),
                base__ as *mut _ as _,
                &mut result__,
            )
            .from_abi::<Path>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IPathStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Fill)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFill)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stroke(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stroke)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStroke<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStroke)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeMiterLimit(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeThickness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeThickness)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeStartLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeStartLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeEndLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeEndLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<super::Media::PenLineJoin> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineJoin = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineJoin>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeLineJoin(
        &self,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeDashOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashCap(&self, value: super::Media::PenLineCap) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<super::Media::DoubleCollection> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArray)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::DoubleCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashArray<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::DoubleCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashArray)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> ::windows::core::Result<super::Media::Stretch> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::Stretch = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stretch)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Stretch>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStretch)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn GeometryTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GeometryTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetAlphaMask(
        &self,
    ) -> ::windows::core::Result<super::super::Composition::CompositionBrush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAlphaMask)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::CompositionBrush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DesiredSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DesiredSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowDrop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowDrop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowDrop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowDrop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Opacity(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Opacity)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacity(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacity)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows::core::Result<super::Media::RectangleGeometry> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Clip)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::RectangleGeometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<'a, Param0: ::windows::core::IntoParam<'a, super::Media::RectangleGeometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetClip)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Transform>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransform)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows::core::Result<super::Media::Projection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Projection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Projection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Projection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProjection)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows::core::Result<super::Media::Media3D::Transform3D> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transform3D)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Media3D::Transform3D>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Media3D::Transform3D>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransform3D)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderTransformOrigin(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Point = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRenderTransformOrigin<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Point>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Visibility(&self) -> ::windows::core::Result<super::Visibility> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Visibility = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Visibility)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Visibility>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVisibility)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseLayoutRounding(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> ::windows::core::Result<super::Media::Animation::TransitionCollection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transitions)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Animation::TransitionCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Animation::TransitionCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransitions)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows::core::Result<super::Media::CacheMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CacheMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::CacheMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<'a, Param0: ::windows::core::IntoParam<'a, super::Media::CacheMode>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCacheMode)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsDoubleTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanDrag(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanDrag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanDrag(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanDrag)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsRightTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHoldingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows::core::Result<super::Input::ManipulationModes> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::ManipulationModes = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::ManipulationModes>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetManipulationMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<super::Input::Pointer>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptures)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<super::Input::Pointer>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(
        &self,
    ) -> ::windows::core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextFlyout)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Controls::Primitives::FlyoutBase>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Controls::Primitives::FlyoutBase>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetContextFlyout)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows::core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Media::ElementCompositeMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CompositeMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::ElementCompositeMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCompositeMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>
    {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Lights)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanBeScrollAnchor(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsAccessKeyScope(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKeyScopeOwner(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKeyScopeOwner<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKey(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKey)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKey<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKey)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyTipPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyTipPlacementMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyTipPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipTarget(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipTarget<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusKeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusKeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector<super::Input::KeyboardAccelerator>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<
                super::Input::KeyboardAccelerator,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyboardAcceleratorPlacementTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardAcceleratorPlacementMode =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardAcceleratorPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows::core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::ElementHighContrastAdjustment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementHighContrastAdjustment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn OpacityTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).OpacityTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacityTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacityTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Translation(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Translation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslation<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslation)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TranslationTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TranslationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Rotation(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Rotation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Scale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScale<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScale)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ScaleTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ScaleTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScaleTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScaleTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Matrix4x4 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformMatrix)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTransformMatrix<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Matrix4x4>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransformMatrix)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CenterPoint)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCenterPoint<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCenterPoint)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationAxis)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationAxis<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationAxis)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector2 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XamlRoot(&self) -> ::windows::core::Result<super::XamlRoot> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XamlRoot)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::XamlRoot>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXamlRoot<'a, Param0: ::windows::core::IntoParam<'a, super::XamlRoot>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXamlRoot)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows::core::Result<super::Media::Shadow> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Shadow)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Shadow>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Shadow>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetShadow)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RasterizationScale(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RasterizationScale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRasterizationScale)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusState(&self) -> ::windows::core::Result<super::FocusState> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::FocusState = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusState)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FocusState>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseSystemFocusVisuals(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusLeft(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeft)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusLeft<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeft)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusRight(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusRight<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRight)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusUp(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUp)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusUp<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUp)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusDown(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDown)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusDown<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDown)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTabStop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTabStop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTabStop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTabStop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TabIndex(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: i32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabIndex)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<i32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTabIndex(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabIndex)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GotFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GotFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGotFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LostFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LostFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLostFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DropCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDropCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CharacterReceived)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveCharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveCharacterReceived)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragEnter<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragEnter)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragEnter<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragEnter)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragLeave<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragLeave)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragLeave<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragLeave)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragOver<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragOver)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragOver<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragOver)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Drop<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Drop)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDrop<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDrop)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerPressed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerPressed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerMoved)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerMoved)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerReleased)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerReleased)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerEntered)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerEntered)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerExited)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerExited)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<'a, Param0: ::windows::core::IntoParam<'a, super::Input::TappedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::DoubleTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DoubleTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDoubleTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::HoldingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Holding)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHolding<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHolding)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::RightTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RightTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveRightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveRightTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationInertiaStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationDeltaEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationDelta)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationDelta)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationCompletedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GettingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGettingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LosingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLosingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).NoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveNoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveBringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Measure<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Size>>(
        &self,
        availablesize: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Measure)(
                ::core::mem::transmute_copy(this),
                availablesize.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Arrange<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Rect>>(
        &self,
        finalrect: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Arrange)(
                ::core::mem::transmute_copy(this),
                finalrect.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<'a, Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CapturePointer)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCapture)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReleasePointerCaptures(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCaptures)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AddHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
        handledeventstoo: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).AddHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<'a, Param0: ::windows::core::IntoParam<'a, super::UIElement>>(
        &self,
        visual: Param0,
    ) -> ::windows::core::Result<super::Media::GeneralTransform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformToVisual)(
                ::core::mem::transmute_copy(this),
                visual.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Media::GeneralTransform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateMeasure(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateMeasure)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateArrange(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateArrange)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UpdateLayout(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UpdateLayout)(::core::mem::transmute_copy(
                this,
            ))
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CancelDirectManipulations(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CancelDirectManipulations)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::PointerPoint>,
    >(
        &self,
        pointerpoint: Param0,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StartDragAsync)(
                ::core::mem::transmute_copy(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<
                ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoView(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoView)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoViewWithOptions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::BringIntoViewOptions>,
    >(
        &self,
        options: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::core::mem::transmute_copy(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ProcessKeyboardAcceleratorEventArgs>,
    >(
        &self,
        args: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::core::mem::transmute_copy(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Focus(&self, value: super::FocusState) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Focus)(
                ::core::mem::transmute_copy(this),
                value,
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StartAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StopAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StopAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows::core::Result<super::super::Input::InputCursor> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProtectedCursor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Input::InputCursor>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::InputCursor>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProtectedCursor)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<super::super::Composition::Visual> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetVisualInternal)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::Visual>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IPathFactory<R, F: FnOnce(&IPathFactory) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<Path, IPathFactory> =
            ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
    #[doc(hidden)]
    pub fn IPathStatics<R, F: FnOnce(&IPathStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<Path, IPathStatics> =
            ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
}
impl ::core::clone::Clone for Path {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Path {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Path {}
impl ::core::fmt::Debug for Path {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Path").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Path {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Shapes.Path;{757d1cd8-0ec0-55c5-b400-66657e493e78})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Interface for Path {
    type Vtable = IPath_Vtbl;
    const IID: ::windows::core::GUID = <IPath as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Path {
    const NAME: &'static str = "Microsoft.UI.Xaml.Shapes.Path";
}
impl ::core::convert::From<Path> for ::windows::core::IUnknown {
    fn from(value: Path) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Path> for ::windows::core::IUnknown {
    fn from(value: &Path) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &'a Path {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<Path> for ::windows::core::IInspectable {
    fn from(value: Path) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Path> for ::windows::core::IInspectable {
    fn from(value: &Path) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for &'a Path {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Path> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Path) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Path> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Path) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for &Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::core::convert::TryInto::<super::super::Composition::IAnimationObject>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Path> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: Path) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Path> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: &Path) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for &Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Path> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: Path) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Path> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: &Path) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for &Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement2>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
impl ::core::convert::From<Path> for Shape {
    fn from(value: Path) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Path> for Shape {
    fn from(value: &Path) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for &Path {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::Param::Owned(::core::convert::Into::<Shape>::into(self))
    }
}
impl ::core::convert::From<Path> for super::FrameworkElement {
    fn from(value: Path) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Path> for super::FrameworkElement {
    fn from(value: &Path) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for &Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::FrameworkElement>::into(self))
    }
}
impl ::core::convert::From<Path> for super::UIElement {
    fn from(value: Path) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Path> for super::UIElement {
    fn from(value: &Path) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for &Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::UIElement>::into(self))
    }
}
impl ::core::convert::From<Path> for super::DependencyObject {
    fn from(value: Path) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Path> for super::DependencyObject {
    fn from(value: &Path) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for &Path {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::DependencyObject>::into(self))
    }
}
unsafe impl ::core::marker::Send for Path {}
unsafe impl ::core::marker::Sync for Path {}
#[doc = "*Required features: 'UI_Xaml_Shapes'*"]
#[repr(transparent)]
pub struct Polygon(::windows::core::IUnknown);
impl Polygon {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.activate_instance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IActivationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<
            Polygon,
            ::windows::core::IActivationFactory,
        > = ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn PopulatePropertyInfo<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>,
        Param1: ::windows::core::IntoParam<'a, super::super::Composition::AnimationPropertyInfo>,
    >(
        &self,
        propertyname: Param0,
        propertyinfo: Param1,
    ) -> ::windows::core::Result<()> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).PopulatePropertyInfo)(
                ::core::mem::transmute_copy(this),
                propertyname.into_param().abi(),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        dp: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ClearValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ClearValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReadLocalValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ReadLocalValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetAnimationBaseValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAnimationBaseValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RegisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::DependencyPropertyChangedCallback>,
    >(
        &self,
        dp: Param0,
        callback: Param1,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: i64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi::<i64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UnregisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Dispatcher)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Dispatching'*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DispatcherQueue)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Triggers(&self) -> ::windows::core::Result<super::TriggerCollection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Triggers)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::TriggerCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Resources(&self) -> ::windows::core::Result<super::ResourceDictionary> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Resources)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ResourceDictionary>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetResources<'a, Param0: ::windows::core::IntoParam<'a, super::ResourceDictionary>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetResources)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Tag(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTag<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTag)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Language(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Language)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetLanguage<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetLanguage)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Width(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Width)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Height(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Height)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HorizontalAlignment(&self) -> ::windows::core::Result<super::HorizontalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::HorizontalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::HorizontalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn VerticalAlignment(&self) -> ::windows::core::Result<super::VerticalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::VerticalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).VerticalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::VerticalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVerticalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Margin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Margin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Name)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetName)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BaseUri(&self) -> ::windows::core::Result<::windows::Foundation::Uri> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BaseUri)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Uri>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContext(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContext)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetDataContext<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetDataContext)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusOnInteraction(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualMargin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualSecondaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualPrimaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusWhenDisabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Style(&self) -> ::windows::core::Result<super::Style> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Style)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Style>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStyle<'a, Param0: ::windows::core::IntoParam<'a, super::Style>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStyle)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Parent(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Parent)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FlowDirection(&self) -> ::windows::core::Result<super::FlowDirection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::FlowDirection = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FlowDirection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FlowDirection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFlowDirection)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RequestedTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RequestedTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRequestedTheme)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsLoaded(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsLoaded)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Unloaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Unloaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveUnloaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveUnloaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContextChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDataContextChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::SizeChangedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).SizeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveSizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveSizeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::EventHandler<::windows::core::IInspectable>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LayoutUpdated)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loading)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoading)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn EffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).EffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveEffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FindName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FindName)(
                ::core::mem::transmute_copy(this),
                name.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::Data::BindingBase>,
    >(
        &self,
        dp: Param0,
        binding: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetBinding)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                binding.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<super::Data::BindingExpression> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetBindingExpression)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Data::BindingExpression>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateViewport(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateViewport)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FillRule(&self) -> ::windows::core::Result<super::Media::FillRule> {
        let this = self;
        unsafe {
            let mut result__: super::Media::FillRule = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FillRule)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::FillRule>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFillRule(&self, value: super::Media::FillRule) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFillRule)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Points(&self) -> ::windows::core::Result<super::Media::PointCollection> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Points)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PointCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetPoints<'a, Param0: ::windows::core::IntoParam<'a, super::Media::PointCollection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetPoints)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FillRuleProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IPolygonStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FillRuleProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn PointsProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IPolygonStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointsProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Fill)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFill)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stroke(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stroke)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStroke<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStroke)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeMiterLimit(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeThickness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeThickness)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeStartLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeStartLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeEndLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeEndLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<super::Media::PenLineJoin> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineJoin = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineJoin>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeLineJoin(
        &self,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeDashOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashCap(&self, value: super::Media::PenLineCap) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<super::Media::DoubleCollection> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArray)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::DoubleCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashArray<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::DoubleCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashArray)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> ::windows::core::Result<super::Media::Stretch> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::Stretch = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stretch)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Stretch>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStretch)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn GeometryTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GeometryTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetAlphaMask(
        &self,
    ) -> ::windows::core::Result<super::super::Composition::CompositionBrush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAlphaMask)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::CompositionBrush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DesiredSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DesiredSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowDrop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowDrop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowDrop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowDrop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Opacity(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Opacity)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacity(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacity)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows::core::Result<super::Media::RectangleGeometry> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Clip)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::RectangleGeometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<'a, Param0: ::windows::core::IntoParam<'a, super::Media::RectangleGeometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetClip)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Transform>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransform)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows::core::Result<super::Media::Projection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Projection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Projection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Projection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProjection)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows::core::Result<super::Media::Media3D::Transform3D> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transform3D)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Media3D::Transform3D>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Media3D::Transform3D>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransform3D)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderTransformOrigin(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Point = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRenderTransformOrigin<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Point>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Visibility(&self) -> ::windows::core::Result<super::Visibility> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Visibility = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Visibility)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Visibility>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVisibility)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseLayoutRounding(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> ::windows::core::Result<super::Media::Animation::TransitionCollection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transitions)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Animation::TransitionCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Animation::TransitionCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransitions)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows::core::Result<super::Media::CacheMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CacheMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::CacheMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<'a, Param0: ::windows::core::IntoParam<'a, super::Media::CacheMode>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCacheMode)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsDoubleTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanDrag(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanDrag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanDrag(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanDrag)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsRightTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHoldingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows::core::Result<super::Input::ManipulationModes> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::ManipulationModes = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::ManipulationModes>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetManipulationMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<super::Input::Pointer>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptures)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<super::Input::Pointer>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(
        &self,
    ) -> ::windows::core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextFlyout)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Controls::Primitives::FlyoutBase>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Controls::Primitives::FlyoutBase>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetContextFlyout)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows::core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Media::ElementCompositeMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CompositeMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::ElementCompositeMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCompositeMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>
    {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Lights)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanBeScrollAnchor(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsAccessKeyScope(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKeyScopeOwner(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKeyScopeOwner<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKey(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKey)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKey<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKey)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyTipPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyTipPlacementMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyTipPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipTarget(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipTarget<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusKeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusKeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector<super::Input::KeyboardAccelerator>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<
                super::Input::KeyboardAccelerator,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyboardAcceleratorPlacementTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardAcceleratorPlacementMode =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardAcceleratorPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows::core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::ElementHighContrastAdjustment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementHighContrastAdjustment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn OpacityTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).OpacityTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacityTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacityTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Translation(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Translation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslation<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslation)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TranslationTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TranslationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Rotation(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Rotation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Scale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScale<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScale)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ScaleTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ScaleTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScaleTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScaleTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Matrix4x4 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformMatrix)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTransformMatrix<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Matrix4x4>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransformMatrix)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CenterPoint)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCenterPoint<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCenterPoint)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationAxis)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationAxis<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationAxis)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector2 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XamlRoot(&self) -> ::windows::core::Result<super::XamlRoot> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XamlRoot)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::XamlRoot>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXamlRoot<'a, Param0: ::windows::core::IntoParam<'a, super::XamlRoot>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXamlRoot)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows::core::Result<super::Media::Shadow> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Shadow)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Shadow>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Shadow>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetShadow)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RasterizationScale(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RasterizationScale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRasterizationScale)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusState(&self) -> ::windows::core::Result<super::FocusState> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::FocusState = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusState)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FocusState>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseSystemFocusVisuals(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusLeft(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeft)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusLeft<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeft)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusRight(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusRight<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRight)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusUp(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUp)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusUp<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUp)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusDown(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDown)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusDown<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDown)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTabStop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTabStop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTabStop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTabStop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TabIndex(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: i32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabIndex)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<i32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTabIndex(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabIndex)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GotFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GotFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGotFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LostFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LostFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLostFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DropCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDropCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CharacterReceived)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveCharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveCharacterReceived)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragEnter<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragEnter)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragEnter<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragEnter)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragLeave<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragLeave)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragLeave<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragLeave)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragOver<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragOver)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragOver<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragOver)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Drop<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Drop)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDrop<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDrop)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerPressed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerPressed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerMoved)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerMoved)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerReleased)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerReleased)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerEntered)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerEntered)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerExited)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerExited)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<'a, Param0: ::windows::core::IntoParam<'a, super::Input::TappedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::DoubleTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DoubleTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDoubleTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::HoldingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Holding)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHolding<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHolding)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::RightTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RightTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveRightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveRightTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationInertiaStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationDeltaEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationDelta)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationDelta)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationCompletedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GettingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGettingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LosingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLosingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).NoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveNoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveBringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Measure<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Size>>(
        &self,
        availablesize: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Measure)(
                ::core::mem::transmute_copy(this),
                availablesize.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Arrange<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Rect>>(
        &self,
        finalrect: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Arrange)(
                ::core::mem::transmute_copy(this),
                finalrect.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<'a, Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CapturePointer)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCapture)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReleasePointerCaptures(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCaptures)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AddHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
        handledeventstoo: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).AddHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<'a, Param0: ::windows::core::IntoParam<'a, super::UIElement>>(
        &self,
        visual: Param0,
    ) -> ::windows::core::Result<super::Media::GeneralTransform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformToVisual)(
                ::core::mem::transmute_copy(this),
                visual.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Media::GeneralTransform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateMeasure(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateMeasure)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateArrange(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateArrange)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UpdateLayout(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UpdateLayout)(::core::mem::transmute_copy(
                this,
            ))
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CancelDirectManipulations(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CancelDirectManipulations)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::PointerPoint>,
    >(
        &self,
        pointerpoint: Param0,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StartDragAsync)(
                ::core::mem::transmute_copy(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<
                ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoView(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoView)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoViewWithOptions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::BringIntoViewOptions>,
    >(
        &self,
        options: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::core::mem::transmute_copy(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ProcessKeyboardAcceleratorEventArgs>,
    >(
        &self,
        args: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::core::mem::transmute_copy(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Focus(&self, value: super::FocusState) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Focus)(
                ::core::mem::transmute_copy(this),
                value,
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StartAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StopAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StopAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows::core::Result<super::super::Input::InputCursor> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProtectedCursor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Input::InputCursor>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::InputCursor>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProtectedCursor)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<super::super::Composition::Visual> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetVisualInternal)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::Visual>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IPolygonStatics<R, F: FnOnce(&IPolygonStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<Polygon, IPolygonStatics> =
            ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
}
impl ::core::clone::Clone for Polygon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Polygon {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Polygon {}
impl ::core::fmt::Debug for Polygon {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Polygon").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Polygon {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Shapes.Polygon;{fa126347-d1d4-54dd-b1a4-c35019397944})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Interface for Polygon {
    type Vtable = IPolygon_Vtbl;
    const IID: ::windows::core::GUID = <IPolygon as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Polygon {
    const NAME: &'static str = "Microsoft.UI.Xaml.Shapes.Polygon";
}
impl ::core::convert::From<Polygon> for ::windows::core::IUnknown {
    fn from(value: Polygon) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Polygon> for ::windows::core::IUnknown {
    fn from(value: &Polygon) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &'a Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<Polygon> for ::windows::core::IInspectable {
    fn from(value: Polygon) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Polygon> for ::windows::core::IInspectable {
    fn from(value: &Polygon) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for &'a Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Polygon> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Polygon) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Polygon> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Polygon) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for &Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::core::convert::TryInto::<super::super::Composition::IAnimationObject>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Polygon> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: Polygon) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Polygon> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: &Polygon) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for &Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Polygon> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: Polygon) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Polygon> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: &Polygon) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for &Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement2>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
impl ::core::convert::From<Polygon> for Shape {
    fn from(value: Polygon) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polygon> for Shape {
    fn from(value: &Polygon) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for &Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::Param::Owned(::core::convert::Into::<Shape>::into(self))
    }
}
impl ::core::convert::From<Polygon> for super::FrameworkElement {
    fn from(value: Polygon) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polygon> for super::FrameworkElement {
    fn from(value: &Polygon) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for &Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::FrameworkElement>::into(self))
    }
}
impl ::core::convert::From<Polygon> for super::UIElement {
    fn from(value: Polygon) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polygon> for super::UIElement {
    fn from(value: &Polygon) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for &Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::UIElement>::into(self))
    }
}
impl ::core::convert::From<Polygon> for super::DependencyObject {
    fn from(value: Polygon) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polygon> for super::DependencyObject {
    fn from(value: &Polygon) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for &Polygon {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::DependencyObject>::into(self))
    }
}
unsafe impl ::core::marker::Send for Polygon {}
unsafe impl ::core::marker::Sync for Polygon {}
#[doc = "*Required features: 'UI_Xaml_Shapes'*"]
#[repr(transparent)]
pub struct Polyline(::windows::core::IUnknown);
impl Polyline {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.activate_instance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IActivationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<
            Polyline,
            ::windows::core::IActivationFactory,
        > = ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn PopulatePropertyInfo<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>,
        Param1: ::windows::core::IntoParam<'a, super::super::Composition::AnimationPropertyInfo>,
    >(
        &self,
        propertyname: Param0,
        propertyinfo: Param1,
    ) -> ::windows::core::Result<()> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).PopulatePropertyInfo)(
                ::core::mem::transmute_copy(this),
                propertyname.into_param().abi(),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        dp: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ClearValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ClearValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReadLocalValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ReadLocalValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetAnimationBaseValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAnimationBaseValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RegisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::DependencyPropertyChangedCallback>,
    >(
        &self,
        dp: Param0,
        callback: Param1,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: i64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi::<i64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UnregisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Dispatcher)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Dispatching'*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DispatcherQueue)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Triggers(&self) -> ::windows::core::Result<super::TriggerCollection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Triggers)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::TriggerCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Resources(&self) -> ::windows::core::Result<super::ResourceDictionary> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Resources)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ResourceDictionary>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetResources<'a, Param0: ::windows::core::IntoParam<'a, super::ResourceDictionary>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetResources)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Tag(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTag<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTag)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Language(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Language)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetLanguage<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetLanguage)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Width(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Width)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Height(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Height)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HorizontalAlignment(&self) -> ::windows::core::Result<super::HorizontalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::HorizontalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::HorizontalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn VerticalAlignment(&self) -> ::windows::core::Result<super::VerticalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::VerticalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).VerticalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::VerticalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVerticalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Margin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Margin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Name)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetName)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BaseUri(&self) -> ::windows::core::Result<::windows::Foundation::Uri> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BaseUri)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Uri>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContext(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContext)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetDataContext<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetDataContext)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusOnInteraction(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualMargin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualSecondaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualPrimaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusWhenDisabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Style(&self) -> ::windows::core::Result<super::Style> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Style)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Style>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStyle<'a, Param0: ::windows::core::IntoParam<'a, super::Style>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStyle)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Parent(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Parent)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FlowDirection(&self) -> ::windows::core::Result<super::FlowDirection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::FlowDirection = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FlowDirection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FlowDirection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFlowDirection)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RequestedTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RequestedTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRequestedTheme)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsLoaded(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsLoaded)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Unloaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Unloaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveUnloaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveUnloaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContextChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDataContextChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::SizeChangedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).SizeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveSizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveSizeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::EventHandler<::windows::core::IInspectable>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LayoutUpdated)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loading)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoading)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn EffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).EffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveEffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FindName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FindName)(
                ::core::mem::transmute_copy(this),
                name.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::Data::BindingBase>,
    >(
        &self,
        dp: Param0,
        binding: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetBinding)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                binding.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<super::Data::BindingExpression> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetBindingExpression)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Data::BindingExpression>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateViewport(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateViewport)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FillRule(&self) -> ::windows::core::Result<super::Media::FillRule> {
        let this = self;
        unsafe {
            let mut result__: super::Media::FillRule = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FillRule)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::FillRule>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFillRule(&self, value: super::Media::FillRule) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFillRule)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Points(&self) -> ::windows::core::Result<super::Media::PointCollection> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Points)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PointCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetPoints<'a, Param0: ::windows::core::IntoParam<'a, super::Media::PointCollection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetPoints)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FillRuleProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IPolylineStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FillRuleProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn PointsProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IPolylineStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointsProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Fill)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFill)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stroke(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stroke)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStroke<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStroke)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeMiterLimit(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeThickness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeThickness)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeStartLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeStartLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeEndLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeEndLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<super::Media::PenLineJoin> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineJoin = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineJoin>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeLineJoin(
        &self,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeDashOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashCap(&self, value: super::Media::PenLineCap) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<super::Media::DoubleCollection> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArray)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::DoubleCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashArray<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::DoubleCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashArray)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> ::windows::core::Result<super::Media::Stretch> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::Stretch = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stretch)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Stretch>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStretch)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn GeometryTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GeometryTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetAlphaMask(
        &self,
    ) -> ::windows::core::Result<super::super::Composition::CompositionBrush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAlphaMask)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::CompositionBrush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DesiredSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DesiredSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowDrop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowDrop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowDrop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowDrop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Opacity(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Opacity)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacity(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacity)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows::core::Result<super::Media::RectangleGeometry> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Clip)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::RectangleGeometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<'a, Param0: ::windows::core::IntoParam<'a, super::Media::RectangleGeometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetClip)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Transform>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransform)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows::core::Result<super::Media::Projection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Projection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Projection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Projection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProjection)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows::core::Result<super::Media::Media3D::Transform3D> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transform3D)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Media3D::Transform3D>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Media3D::Transform3D>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransform3D)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderTransformOrigin(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Point = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRenderTransformOrigin<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Point>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Visibility(&self) -> ::windows::core::Result<super::Visibility> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Visibility = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Visibility)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Visibility>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVisibility)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseLayoutRounding(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> ::windows::core::Result<super::Media::Animation::TransitionCollection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transitions)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Animation::TransitionCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Animation::TransitionCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransitions)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows::core::Result<super::Media::CacheMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CacheMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::CacheMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<'a, Param0: ::windows::core::IntoParam<'a, super::Media::CacheMode>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCacheMode)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsDoubleTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanDrag(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanDrag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanDrag(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanDrag)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsRightTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHoldingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows::core::Result<super::Input::ManipulationModes> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::ManipulationModes = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::ManipulationModes>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetManipulationMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<super::Input::Pointer>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptures)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<super::Input::Pointer>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(
        &self,
    ) -> ::windows::core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextFlyout)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Controls::Primitives::FlyoutBase>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Controls::Primitives::FlyoutBase>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetContextFlyout)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows::core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Media::ElementCompositeMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CompositeMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::ElementCompositeMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCompositeMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>
    {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Lights)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanBeScrollAnchor(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsAccessKeyScope(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKeyScopeOwner(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKeyScopeOwner<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKey(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKey)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKey<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKey)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyTipPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyTipPlacementMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyTipPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipTarget(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipTarget<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusKeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusKeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector<super::Input::KeyboardAccelerator>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<
                super::Input::KeyboardAccelerator,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyboardAcceleratorPlacementTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardAcceleratorPlacementMode =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardAcceleratorPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows::core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::ElementHighContrastAdjustment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementHighContrastAdjustment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn OpacityTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).OpacityTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacityTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacityTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Translation(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Translation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslation<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslation)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TranslationTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TranslationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Rotation(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Rotation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Scale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScale<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScale)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ScaleTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ScaleTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScaleTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScaleTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Matrix4x4 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformMatrix)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTransformMatrix<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Matrix4x4>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransformMatrix)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CenterPoint)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCenterPoint<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCenterPoint)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationAxis)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationAxis<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationAxis)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector2 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XamlRoot(&self) -> ::windows::core::Result<super::XamlRoot> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XamlRoot)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::XamlRoot>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXamlRoot<'a, Param0: ::windows::core::IntoParam<'a, super::XamlRoot>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXamlRoot)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows::core::Result<super::Media::Shadow> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Shadow)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Shadow>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Shadow>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetShadow)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RasterizationScale(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RasterizationScale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRasterizationScale)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusState(&self) -> ::windows::core::Result<super::FocusState> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::FocusState = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusState)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FocusState>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseSystemFocusVisuals(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusLeft(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeft)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusLeft<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeft)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusRight(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusRight<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRight)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusUp(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUp)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusUp<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUp)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusDown(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDown)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusDown<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDown)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTabStop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTabStop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTabStop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTabStop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TabIndex(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: i32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabIndex)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<i32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTabIndex(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabIndex)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GotFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GotFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGotFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LostFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LostFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLostFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DropCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDropCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CharacterReceived)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveCharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveCharacterReceived)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragEnter<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragEnter)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragEnter<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragEnter)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragLeave<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragLeave)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragLeave<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragLeave)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragOver<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragOver)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragOver<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragOver)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Drop<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Drop)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDrop<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDrop)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerPressed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerPressed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerMoved)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerMoved)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerReleased)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerReleased)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerEntered)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerEntered)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerExited)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerExited)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<'a, Param0: ::windows::core::IntoParam<'a, super::Input::TappedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::DoubleTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DoubleTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDoubleTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::HoldingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Holding)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHolding<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHolding)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::RightTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RightTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveRightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveRightTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationInertiaStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationDeltaEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationDelta)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationDelta)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationCompletedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GettingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGettingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LosingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLosingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).NoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveNoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveBringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Measure<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Size>>(
        &self,
        availablesize: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Measure)(
                ::core::mem::transmute_copy(this),
                availablesize.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Arrange<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Rect>>(
        &self,
        finalrect: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Arrange)(
                ::core::mem::transmute_copy(this),
                finalrect.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<'a, Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CapturePointer)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCapture)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReleasePointerCaptures(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCaptures)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AddHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
        handledeventstoo: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).AddHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<'a, Param0: ::windows::core::IntoParam<'a, super::UIElement>>(
        &self,
        visual: Param0,
    ) -> ::windows::core::Result<super::Media::GeneralTransform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformToVisual)(
                ::core::mem::transmute_copy(this),
                visual.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Media::GeneralTransform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateMeasure(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateMeasure)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateArrange(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateArrange)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UpdateLayout(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UpdateLayout)(::core::mem::transmute_copy(
                this,
            ))
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CancelDirectManipulations(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CancelDirectManipulations)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::PointerPoint>,
    >(
        &self,
        pointerpoint: Param0,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StartDragAsync)(
                ::core::mem::transmute_copy(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<
                ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoView(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoView)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoViewWithOptions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::BringIntoViewOptions>,
    >(
        &self,
        options: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::core::mem::transmute_copy(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ProcessKeyboardAcceleratorEventArgs>,
    >(
        &self,
        args: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::core::mem::transmute_copy(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Focus(&self, value: super::FocusState) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Focus)(
                ::core::mem::transmute_copy(this),
                value,
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StartAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StopAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StopAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows::core::Result<super::super::Input::InputCursor> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProtectedCursor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Input::InputCursor>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::InputCursor>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProtectedCursor)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<super::super::Composition::Visual> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetVisualInternal)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::Visual>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IPolylineStatics<R, F: FnOnce(&IPolylineStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<Polyline, IPolylineStatics> =
            ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
}
impl ::core::clone::Clone for Polyline {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Polyline {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Polyline {}
impl ::core::fmt::Debug for Polyline {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Polyline").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Polyline {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Shapes.Polyline;{c7f0bec6-184c-5d96-8102-04dd211e100c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Interface for Polyline {
    type Vtable = IPolyline_Vtbl;
    const IID: ::windows::core::GUID = <IPolyline as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Polyline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Shapes.Polyline";
}
impl ::core::convert::From<Polyline> for ::windows::core::IUnknown {
    fn from(value: Polyline) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Polyline> for ::windows::core::IUnknown {
    fn from(value: &Polyline) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &'a Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<Polyline> for ::windows::core::IInspectable {
    fn from(value: Polyline) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Polyline> for ::windows::core::IInspectable {
    fn from(value: &Polyline) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for &'a Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Polyline> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Polyline) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Polyline> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Polyline) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for &Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::core::convert::TryInto::<super::super::Composition::IAnimationObject>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Polyline> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: Polyline) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Polyline> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: &Polyline) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for &Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Polyline> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: Polyline) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Polyline> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: &Polyline) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for &Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement2>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
impl ::core::convert::From<Polyline> for Shape {
    fn from(value: Polyline) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polyline> for Shape {
    fn from(value: &Polyline) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for &Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::Param::Owned(::core::convert::Into::<Shape>::into(self))
    }
}
impl ::core::convert::From<Polyline> for super::FrameworkElement {
    fn from(value: Polyline) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polyline> for super::FrameworkElement {
    fn from(value: &Polyline) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for &Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::FrameworkElement>::into(self))
    }
}
impl ::core::convert::From<Polyline> for super::UIElement {
    fn from(value: Polyline) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polyline> for super::UIElement {
    fn from(value: &Polyline) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for &Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::UIElement>::into(self))
    }
}
impl ::core::convert::From<Polyline> for super::DependencyObject {
    fn from(value: Polyline) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Polyline> for super::DependencyObject {
    fn from(value: &Polyline) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for &Polyline {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::DependencyObject>::into(self))
    }
}
unsafe impl ::core::marker::Send for Polyline {}
unsafe impl ::core::marker::Sync for Polyline {}
#[doc = "*Required features: 'UI_Xaml_Shapes'*"]
#[repr(transparent)]
pub struct Rectangle(::windows::core::IUnknown);
impl Rectangle {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.activate_instance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IActivationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<
            Rectangle,
            ::windows::core::IActivationFactory,
        > = ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn PopulatePropertyInfo<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>,
        Param1: ::windows::core::IntoParam<'a, super::super::Composition::AnimationPropertyInfo>,
    >(
        &self,
        propertyname: Param0,
        propertyinfo: Param1,
    ) -> ::windows::core::Result<()> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).PopulatePropertyInfo)(
                ::core::mem::transmute_copy(this),
                propertyname.into_param().abi(),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        dp: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ClearValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ClearValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReadLocalValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ReadLocalValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetAnimationBaseValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAnimationBaseValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RegisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::DependencyPropertyChangedCallback>,
    >(
        &self,
        dp: Param0,
        callback: Param1,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: i64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi::<i64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UnregisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Dispatcher)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Dispatching'*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DispatcherQueue)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Triggers(&self) -> ::windows::core::Result<super::TriggerCollection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Triggers)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::TriggerCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Resources(&self) -> ::windows::core::Result<super::ResourceDictionary> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Resources)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ResourceDictionary>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetResources<'a, Param0: ::windows::core::IntoParam<'a, super::ResourceDictionary>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetResources)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Tag(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTag<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTag)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Language(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Language)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetLanguage<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetLanguage)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Width(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Width)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Height(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Height)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HorizontalAlignment(&self) -> ::windows::core::Result<super::HorizontalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::HorizontalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::HorizontalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn VerticalAlignment(&self) -> ::windows::core::Result<super::VerticalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::VerticalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).VerticalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::VerticalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVerticalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Margin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Margin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Name)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetName)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BaseUri(&self) -> ::windows::core::Result<::windows::Foundation::Uri> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BaseUri)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Uri>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContext(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContext)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetDataContext<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetDataContext)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusOnInteraction(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualMargin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualSecondaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualPrimaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusWhenDisabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Style(&self) -> ::windows::core::Result<super::Style> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Style)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Style>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStyle<'a, Param0: ::windows::core::IntoParam<'a, super::Style>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStyle)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Parent(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Parent)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FlowDirection(&self) -> ::windows::core::Result<super::FlowDirection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::FlowDirection = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FlowDirection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FlowDirection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFlowDirection)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RequestedTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RequestedTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRequestedTheme)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsLoaded(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsLoaded)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Unloaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Unloaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveUnloaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveUnloaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContextChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDataContextChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::SizeChangedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).SizeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveSizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveSizeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::EventHandler<::windows::core::IInspectable>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LayoutUpdated)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loading)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoading)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn EffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).EffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveEffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FindName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FindName)(
                ::core::mem::transmute_copy(this),
                name.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::Data::BindingBase>,
    >(
        &self,
        dp: Param0,
        binding: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetBinding)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                binding.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<super::Data::BindingExpression> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetBindingExpression)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Data::BindingExpression>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateViewport(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateViewport)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RadiusX(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RadiusX)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRadiusX(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRadiusX)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RadiusY(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RadiusY)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRadiusY(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRadiusY)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RadiusXProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IRectangleStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RadiusXProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RadiusYProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IRectangleStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RadiusYProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Fill)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFill)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stroke(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stroke)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStroke<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStroke)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeMiterLimit(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeThickness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeThickness)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeStartLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeStartLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeEndLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeEndLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<super::Media::PenLineJoin> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineJoin = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineJoin>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeLineJoin(
        &self,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeDashOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashCap(&self, value: super::Media::PenLineCap) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<super::Media::DoubleCollection> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArray)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::DoubleCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashArray<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::DoubleCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashArray)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> ::windows::core::Result<super::Media::Stretch> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: super::Media::Stretch = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stretch)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Stretch>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStretch)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn GeometryTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GeometryTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetAlphaMask(
        &self,
    ) -> ::windows::core::Result<super::super::Composition::CompositionBrush> {
        let this = &::windows::core::Interface::cast::<IShape>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAlphaMask)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::CompositionBrush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DesiredSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DesiredSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowDrop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowDrop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowDrop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowDrop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Opacity(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Opacity)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacity(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacity)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows::core::Result<super::Media::RectangleGeometry> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Clip)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::RectangleGeometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<'a, Param0: ::windows::core::IntoParam<'a, super::Media::RectangleGeometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetClip)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Transform>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransform)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows::core::Result<super::Media::Projection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Projection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Projection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Projection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProjection)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows::core::Result<super::Media::Media3D::Transform3D> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transform3D)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Media3D::Transform3D>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Media3D::Transform3D>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransform3D)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderTransformOrigin(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Point = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRenderTransformOrigin<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Point>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Visibility(&self) -> ::windows::core::Result<super::Visibility> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Visibility = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Visibility)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Visibility>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVisibility)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseLayoutRounding(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> ::windows::core::Result<super::Media::Animation::TransitionCollection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transitions)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Animation::TransitionCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Animation::TransitionCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransitions)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows::core::Result<super::Media::CacheMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CacheMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::CacheMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<'a, Param0: ::windows::core::IntoParam<'a, super::Media::CacheMode>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCacheMode)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsDoubleTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanDrag(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanDrag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanDrag(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanDrag)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsRightTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHoldingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows::core::Result<super::Input::ManipulationModes> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::ManipulationModes = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::ManipulationModes>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetManipulationMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<super::Input::Pointer>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptures)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<super::Input::Pointer>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(
        &self,
    ) -> ::windows::core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextFlyout)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Controls::Primitives::FlyoutBase>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Controls::Primitives::FlyoutBase>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetContextFlyout)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows::core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Media::ElementCompositeMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CompositeMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::ElementCompositeMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCompositeMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>
    {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Lights)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanBeScrollAnchor(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsAccessKeyScope(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKeyScopeOwner(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKeyScopeOwner<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKey(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKey)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKey<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKey)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyTipPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyTipPlacementMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyTipPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipTarget(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipTarget<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusKeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusKeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector<super::Input::KeyboardAccelerator>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<
                super::Input::KeyboardAccelerator,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyboardAcceleratorPlacementTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardAcceleratorPlacementMode =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardAcceleratorPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows::core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::ElementHighContrastAdjustment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementHighContrastAdjustment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn OpacityTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).OpacityTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacityTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacityTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Translation(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Translation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslation<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslation)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TranslationTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TranslationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Rotation(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Rotation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Scale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScale<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScale)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ScaleTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ScaleTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScaleTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScaleTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Matrix4x4 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformMatrix)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTransformMatrix<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Matrix4x4>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransformMatrix)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CenterPoint)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCenterPoint<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCenterPoint)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationAxis)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationAxis<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationAxis)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector2 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XamlRoot(&self) -> ::windows::core::Result<super::XamlRoot> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XamlRoot)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::XamlRoot>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXamlRoot<'a, Param0: ::windows::core::IntoParam<'a, super::XamlRoot>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXamlRoot)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows::core::Result<super::Media::Shadow> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Shadow)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Shadow>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Shadow>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetShadow)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RasterizationScale(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RasterizationScale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRasterizationScale)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusState(&self) -> ::windows::core::Result<super::FocusState> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::FocusState = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusState)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FocusState>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseSystemFocusVisuals(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusLeft(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeft)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusLeft<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeft)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusRight(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusRight<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRight)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusUp(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUp)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusUp<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUp)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusDown(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDown)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusDown<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDown)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTabStop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTabStop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTabStop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTabStop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TabIndex(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: i32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabIndex)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<i32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTabIndex(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabIndex)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GotFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GotFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGotFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LostFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LostFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLostFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DropCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDropCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CharacterReceived)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveCharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveCharacterReceived)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragEnter<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragEnter)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragEnter<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragEnter)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragLeave<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragLeave)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragLeave<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragLeave)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragOver<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragOver)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragOver<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragOver)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Drop<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Drop)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDrop<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDrop)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerPressed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerPressed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerMoved)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerMoved)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerReleased)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerReleased)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerEntered)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerEntered)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerExited)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerExited)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<'a, Param0: ::windows::core::IntoParam<'a, super::Input::TappedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::DoubleTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DoubleTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDoubleTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::HoldingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Holding)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHolding<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHolding)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::RightTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RightTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveRightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveRightTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationInertiaStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationDeltaEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationDelta)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationDelta)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationCompletedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GettingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGettingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LosingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLosingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).NoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveNoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveBringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Measure<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Size>>(
        &self,
        availablesize: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Measure)(
                ::core::mem::transmute_copy(this),
                availablesize.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Arrange<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Rect>>(
        &self,
        finalrect: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Arrange)(
                ::core::mem::transmute_copy(this),
                finalrect.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<'a, Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CapturePointer)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCapture)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReleasePointerCaptures(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCaptures)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AddHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
        handledeventstoo: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).AddHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<'a, Param0: ::windows::core::IntoParam<'a, super::UIElement>>(
        &self,
        visual: Param0,
    ) -> ::windows::core::Result<super::Media::GeneralTransform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformToVisual)(
                ::core::mem::transmute_copy(this),
                visual.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Media::GeneralTransform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateMeasure(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateMeasure)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateArrange(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateArrange)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UpdateLayout(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UpdateLayout)(::core::mem::transmute_copy(
                this,
            ))
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CancelDirectManipulations(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CancelDirectManipulations)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::PointerPoint>,
    >(
        &self,
        pointerpoint: Param0,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StartDragAsync)(
                ::core::mem::transmute_copy(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<
                ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoView(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoView)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoViewWithOptions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::BringIntoViewOptions>,
    >(
        &self,
        options: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::core::mem::transmute_copy(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ProcessKeyboardAcceleratorEventArgs>,
    >(
        &self,
        args: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::core::mem::transmute_copy(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Focus(&self, value: super::FocusState) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Focus)(
                ::core::mem::transmute_copy(this),
                value,
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StartAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StopAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StopAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows::core::Result<super::super::Input::InputCursor> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProtectedCursor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Input::InputCursor>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::InputCursor>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProtectedCursor)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<super::super::Composition::Visual> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetVisualInternal)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::Visual>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IRectangleStatics<R, F: FnOnce(&IRectangleStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<Rectangle, IRectangleStatics> =
            ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
}
impl ::core::clone::Clone for Rectangle {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Rectangle {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Rectangle {}
impl ::core::fmt::Debug for Rectangle {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Rectangle").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Rectangle {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Shapes.Rectangle;{bf7d30b9-152c-556e-9f10-d0b7eba4e52f})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Interface for Rectangle {
    type Vtable = IRectangle_Vtbl;
    const IID: ::windows::core::GUID = <IRectangle as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Rectangle {
    const NAME: &'static str = "Microsoft.UI.Xaml.Shapes.Rectangle";
}
impl ::core::convert::From<Rectangle> for ::windows::core::IUnknown {
    fn from(value: Rectangle) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Rectangle> for ::windows::core::IUnknown {
    fn from(value: &Rectangle) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &'a Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<Rectangle> for ::windows::core::IInspectable {
    fn from(value: Rectangle) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Rectangle> for ::windows::core::IInspectable {
    fn from(value: &Rectangle) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for &'a Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Rectangle> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Rectangle) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Rectangle> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Rectangle) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject>
    for &Rectangle
{
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::core::convert::TryInto::<super::super::Composition::IAnimationObject>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Rectangle> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: Rectangle) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Rectangle> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: &Rectangle) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for &Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Rectangle> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: Rectangle) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Rectangle> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: &Rectangle) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for &Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement2>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
impl ::core::convert::From<Rectangle> for Shape {
    fn from(value: Rectangle) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Rectangle> for Shape {
    fn from(value: &Rectangle) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, Shape> for &Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, Shape> {
        ::windows::core::Param::Owned(::core::convert::Into::<Shape>::into(self))
    }
}
impl ::core::convert::From<Rectangle> for super::FrameworkElement {
    fn from(value: Rectangle) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Rectangle> for super::FrameworkElement {
    fn from(value: &Rectangle) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for &Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::FrameworkElement>::into(self))
    }
}
impl ::core::convert::From<Rectangle> for super::UIElement {
    fn from(value: Rectangle) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Rectangle> for super::UIElement {
    fn from(value: &Rectangle) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for &Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::UIElement>::into(self))
    }
}
impl ::core::convert::From<Rectangle> for super::DependencyObject {
    fn from(value: Rectangle) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Rectangle> for super::DependencyObject {
    fn from(value: &Rectangle) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for &Rectangle {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::DependencyObject>::into(self))
    }
}
unsafe impl ::core::marker::Send for Rectangle {}
unsafe impl ::core::marker::Sync for Rectangle {}
#[doc = "*Required features: 'UI_Xaml_Shapes'*"]
#[repr(transparent)]
pub struct Shape(::windows::core::IUnknown);
impl Shape {
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn PopulatePropertyInfo<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>,
        Param1: ::windows::core::IntoParam<'a, super::super::Composition::AnimationPropertyInfo>,
    >(
        &self,
        propertyname: Param0,
        propertyinfo: Param1,
    ) -> ::windows::core::Result<()> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).PopulatePropertyInfo)(
                ::core::mem::transmute_copy(this),
                propertyname.into_param().abi(),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        dp: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ClearValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ClearValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReadLocalValue<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>>(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ReadLocalValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GetAnimationBaseValue<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAnimationBaseValue)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RegisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::DependencyPropertyChangedCallback>,
    >(
        &self,
        dp: Param0,
        callback: Param1,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: i64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi::<i64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UnregisterPropertyChangedCallback<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Dispatcher)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Dispatching'*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::IDependencyObject>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DispatcherQueue)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Triggers(&self) -> ::windows::core::Result<super::TriggerCollection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Triggers)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::TriggerCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Resources(&self) -> ::windows::core::Result<super::ResourceDictionary> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Resources)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ResourceDictionary>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetResources<'a, Param0: ::windows::core::IntoParam<'a, super::ResourceDictionary>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetResources)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Tag(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTag<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTag)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Language(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Language)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetLanguage<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetLanguage)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Width(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Width)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Height(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Height)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxWidth(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxWidth)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxWidth(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxWidth)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MinHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MinHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMinHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMinHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn MaxHeight(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).MaxHeight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMaxHeight(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMaxHeight)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HorizontalAlignment(&self) -> ::windows::core::Result<super::HorizontalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::HorizontalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::HorizontalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHorizontalAlignment(
        &self,
        value: super::HorizontalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHorizontalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn VerticalAlignment(&self) -> ::windows::core::Result<super::VerticalAlignment> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::VerticalAlignment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).VerticalAlignment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::VerticalAlignment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVerticalAlignment(
        &self,
        value: super::VerticalAlignment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVerticalAlignment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Margin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Margin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Name)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetName)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BaseUri(&self) -> ::windows::core::Result<::windows::Foundation::Uri> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BaseUri)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Uri>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContext(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContext)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetDataContext<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetDataContext)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusOnInteraction(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualMargin(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualMargin<'a, Param0: ::windows::core::IntoParam<'a, super::Thickness>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualMargin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualSecondaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows::core::Result<super::Thickness> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::Thickness = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Thickness>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFocusVisualPrimaryThickness<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Thickness>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Brush>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowFocusWhenDisabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Style(&self) -> ::windows::core::Result<super::Style> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Style)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Style>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStyle<'a, Param0: ::windows::core::IntoParam<'a, super::Style>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStyle)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Parent(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Parent)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FlowDirection(&self) -> ::windows::core::Result<super::FlowDirection> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::FlowDirection = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FlowDirection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FlowDirection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetFlowDirection(&self, value: super::FlowDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFlowDirection)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RequestedTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RequestedTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRequestedTheme(&self, value: super::ElementTheme) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRequestedTheme)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsLoaded(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsLoaded)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualTheme(&self) -> ::windows::core::Result<super::ElementTheme> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: super::ElementTheme = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualTheme)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementTheme>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Unloaded<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Unloaded)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveUnloaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveUnloaded)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::DataContextChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DataContextChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDataContextChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDataContextChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::SizeChangedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).SizeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveSizeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveSizeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::EventHandler<::windows::core::IInspectable>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LayoutUpdated)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLayoutUpdated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Loading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Loading)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLoading)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                ::windows::core::IInspectable,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveActualThemeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn EffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::FrameworkElement,
                super::EffectiveViewportChangedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).EffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveEffectiveViewportChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FindName<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FindName)(
                ::core::mem::transmute_copy(this),
                name.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn SetBinding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
        Param1: ::windows::core::IntoParam<'a, super::Data::BindingBase>,
    >(
        &self,
        dp: Param0,
        binding: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetBinding)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                binding.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Data'*"]
    #[cfg(feature = "UI_Xaml_Data")]
    pub fn GetBindingExpression<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyProperty>,
    >(
        &self,
        dp: Param0,
    ) -> ::windows::core::Result<super::Data::BindingExpression> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetBindingExpression)(
                ::core::mem::transmute_copy(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Data::BindingExpression>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateViewport(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateViewport)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Fill(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Fill)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetFill<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetFill)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stroke(&self) -> ::windows::core::Result<super::Media::Brush> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stroke)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Brush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStroke<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Brush>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStroke)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeMiterLimit(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeMiterLimit)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThickness)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeThickness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeThickness)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeStartLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = self;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeStartLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeStartLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeEndLineCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = self;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeEndLineCap(
        &self,
        value: super::Media::PenLineCap,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeEndLineCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<super::Media::PenLineJoin> {
        let this = self;
        unsafe {
            let mut result__: super::Media::PenLineJoin = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineJoin>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeLineJoin(
        &self,
        value: super::Media::PenLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeLineJoin)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetStrokeDashOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<super::Media::PenLineCap> {
        let this = self;
        unsafe {
            let mut result__: super::Media::PenLineCap = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCap)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::PenLineCap>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashCap(&self, value: super::Media::PenLineCap) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashCap)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<super::Media::DoubleCollection> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArray)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::DoubleCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStrokeDashArray<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::DoubleCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStrokeDashArray)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Stretch(&self) -> ::windows::core::Result<super::Media::Stretch> {
        let this = self;
        unsafe {
            let mut result__: super::Media::Stretch = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Stretch)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Stretch>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetStretch(&self, value: super::Media::Stretch) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Interface::vtable(this).SetStretch)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn GeometryTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GeometryTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetAlphaMask(
        &self,
    ) -> ::windows::core::Result<super::super::Composition::CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetAlphaMask)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::CompositionBrush>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FillProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FillProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeMiterLimitProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeMiterLimitProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeThicknessProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeThicknessProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeStartLineCapProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeStartLineCapProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeEndLineCapProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeEndLineCapProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeLineJoinProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeLineJoinProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashOffsetProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashOffsetProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashCapProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashCapProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StrokeDashArrayProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StrokeDashArrayProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StretchProperty() -> ::windows::core::Result<super::DependencyProperty> {
        Self::IShapeStatics(|this| unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StretchProperty)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DesiredSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DesiredSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AllowDrop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AllowDrop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAllowDrop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAllowDrop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Opacity(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Opacity)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacity(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacity)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows::core::Result<super::Media::RectangleGeometry> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Clip)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::RectangleGeometry>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetClip<'a, Param0: ::windows::core::IntoParam<'a, super::Media::RectangleGeometry>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetClip)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows::core::Result<super::Media::Transform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransform)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Transform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetRenderTransform<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Transform>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransform)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows::core::Result<super::Media::Projection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Projection)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Projection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetProjection<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Projection>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProjection)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows::core::Result<super::Media::Media3D::Transform3D> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transform3D)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Media3D::Transform3D>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Media3D'*"]
    #[cfg(feature = "UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Media3D::Transform3D>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransform3D)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderTransformOrigin(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Point = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRenderTransformOrigin<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Point>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHitTestVisible)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Visibility(&self) -> ::windows::core::Result<super::Visibility> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Visibility = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Visibility)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Visibility>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetVisibility)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RenderSize(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Size = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RenderSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseLayoutRounding(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseLayoutRounding)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn Transitions(
        &self,
    ) -> ::windows::core::Result<super::Media::Animation::TransitionCollection> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Transitions)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Animation::TransitionCollection>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media_Animation'*"]
    #[cfg(feature = "UI_Xaml_Media_Animation")]
    pub fn SetTransitions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Media::Animation::TransitionCollection>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransitions)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows::core::Result<super::Media::CacheMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CacheMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::CacheMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCacheMode<'a, Param0: ::windows::core::IntoParam<'a, super::Media::CacheMode>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCacheMode)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsDoubleTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanDrag(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanDrag)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanDrag(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanDrag)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsRightTapEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsHoldingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows::core::Result<super::Input::ManipulationModes> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::ManipulationModes = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::ManipulationModes>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: super::Input::ManipulationModes,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetManipulationMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<super::Input::Pointer>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptures)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<super::Input::Pointer>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(
        &self,
    ) -> ::windows::core::Result<super::Controls::Primitives::FlyoutBase> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextFlyout)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Controls::Primitives::FlyoutBase>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Controls_Primitives'*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Controls::Primitives::FlyoutBase>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetContextFlyout)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows::core::Result<super::Media::ElementCompositeMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Media::ElementCompositeMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CompositeMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::ElementCompositeMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: super::Media::ElementCompositeMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCompositeMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Lights(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>
    {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Lights)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<super::Media::XamlLight>>(
                result__,
            )
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CanBeScrollAnchor(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsAccessKeyScope(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKeyScopeOwner(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKeyScopeOwner<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AccessKey(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::core::mem::ManuallyDrop<::windows::core::HSTRING> =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKey)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetAccessKey<'a, Param0: ::windows::core::IntoParam<'a, ::windows::core::HSTRING>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetAccessKey)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyTipPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyTipPlacementMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyTipPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: super::Input::KeyTipPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyTipTarget(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyTipTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyTipTarget<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyTipTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusKeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusKeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: super::Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows::core::Result<super::Input::XYFocusNavigationStrategy> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::XYFocusNavigationStrategy = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::XYFocusNavigationStrategy>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: super::Input::XYFocusNavigationStrategy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector<super::Input::KeyboardAccelerator>,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Collections::IVector<
                super::Input::KeyboardAccelerator,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn KeyboardAcceleratorPlacementTarget(
        &self,
    ) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetKeyboardAcceleratorPlacementTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::DependencyObject>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardAcceleratorPlacementMode =
                ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardAcceleratorPlacementMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: super::Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows::core::Result<super::ElementHighContrastAdjustment> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::ElementHighContrastAdjustment = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).HighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ElementHighContrastAdjustment>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetHighContrastAdjustment(
        &self,
        value: super::ElementHighContrastAdjustment,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TabFocusNavigation(
        &self,
    ) -> ::windows::core::Result<super::Input::KeyboardNavigationMode> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::Input::KeyboardNavigationMode = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Input::KeyboardNavigationMode>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: super::Input::KeyboardNavigationMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabFocusNavigation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn OpacityTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).OpacityTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetOpacityTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetOpacityTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Translation(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Translation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslation<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslation)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TranslationTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TranslationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTranslationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTranslationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Rotation(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Rotation)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotation)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationTransition(&self) -> ::windows::core::Result<super::ScalarTransition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::ScalarTransition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::ScalarTransition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Scale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScale<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScale)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ScaleTransition(&self) -> ::windows::core::Result<super::Vector3Transition> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ScaleTransition)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Vector3Transition>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetScaleTransition<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Vector3Transition>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetScaleTransition)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Matrix4x4 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformMatrix)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTransformMatrix<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Matrix4x4>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTransformMatrix)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CenterPoint)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetCenterPoint<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetCenterPoint)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RotationAxis)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRotationAxis<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Numerics::Vector3>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRotationAxis)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector3 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualOffset)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ActualSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::Numerics::Vector2 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ActualSize)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XamlRoot(&self) -> ::windows::core::Result<super::XamlRoot> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XamlRoot)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::XamlRoot>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXamlRoot<'a, Param0: ::windows::core::IntoParam<'a, super::XamlRoot>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXamlRoot)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows::core::Result<super::Media::Shadow> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Shadow)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::Media::Shadow>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn SetShadow<'a, Param0: ::windows::core::IntoParam<'a, super::Media::Shadow>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetShadow)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RasterizationScale(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: f64 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RasterizationScale)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetRasterizationScale)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn FocusState(&self) -> ::windows::core::Result<super::FocusState> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: super::FocusState = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).FocusState)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::FocusState>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UseSystemFocusVisuals(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusLeft(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusLeft)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusLeft<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusLeft)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusRight(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusRight)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusRight<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusRight)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusUp(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusUp)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusUp<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusUp)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn XYFocusDown(&self) -> ::windows::core::Result<super::DependencyObject> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).XYFocusDown)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::DependencyObject>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetXYFocusDown<'a, Param0: ::windows::core::IntoParam<'a, super::DependencyObject>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetXYFocusDown)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn IsTabStop(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).IsTabStop)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetIsTabStop(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetIsTabStop)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn TabIndex(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: i32 = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TabIndex)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<i32>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn SetTabIndex(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetTabIndex)(
                ::core::mem::transmute_copy(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyUp<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn KeyDown<'a, Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).KeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn GotFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GotFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGotFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn LostFocus<'a, Param0: ::windows::core::IntoParam<'a, super::RoutedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LostFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLostFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DragStartingEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::DropCompletedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DropCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDropCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDropCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CharacterReceived)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveCharacterReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveCharacterReceived)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragEnter<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragEnter)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragEnter<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragEnter)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragLeave<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragLeave)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragLeave<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragLeave)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn DragOver<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DragOver)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDragOver<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDragOver)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Drop<'a, Param0: ::windows::core::IntoParam<'a, super::DragEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Drop)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDrop<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDrop)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerPressed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerPressed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerMoved)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerMoved<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerMoved)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerReleased)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerReleased<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerReleased)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerEntered)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerEntered<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerEntered)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerExited)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerExited)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCaptureLost<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::PointerEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePointerWheelChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Tapped<'a, Param0: ::windows::core::IntoParam<'a, super::Input::TappedEventHandler>>(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Tapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn DoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::DoubleTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).DoubleTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveDoubleTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveDoubleTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn Holding<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::HoldingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Holding)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHolding<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHolding)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ContextRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<super::UIElement, super::RoutedEventArgs>,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ContextCanceled)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveContextCanceled<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveContextCanceled)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn RightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::RightTappedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).RightTapped)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveRightTapped<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveRightTapped)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationInertiaStartingEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationInertiaStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationStartedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationStarted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationStarted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationStarted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationDeltaEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationDelta)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationDelta<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationDelta)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ManipulationCompletedEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveManipulationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyDisplayDismissed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn AccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::AccessKeyInvokedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).AccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveAccessKeyInvoked<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveProcessKeyboardAccelerators<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn GettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::GettingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GettingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveGettingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveGettingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn LosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::LosingFocusEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).LosingFocus)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveLosingFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveLosingFocus)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn NoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).NoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveNoFocusCandidateFound<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyDown<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn PreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::KeyEventHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).PreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemovePreviewKeyUp<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn BringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ::windows::Foundation::TypedEventHandler<
                super::UIElement,
                super::BringIntoViewRequestedEventArgs,
            >,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::Foundation::EventRegistrationToken = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).BringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveBringIntoViewRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::EventRegistrationToken>,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::core::mem::transmute_copy(this),
                token.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Measure<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Size>>(
        &self,
        availablesize: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Measure)(
                ::core::mem::transmute_copy(this),
                availablesize.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Arrange<'a, Param0: ::windows::core::IntoParam<'a, ::windows::Foundation::Rect>>(
        &self,
        finalrect: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).Arrange)(
                ::core::mem::transmute_copy(this),
                finalrect.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn CapturePointer<'a, Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>>(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CapturePointer)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn ReleasePointerCapture<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::Pointer>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCapture)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn ReleasePointerCaptures(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).ReleasePointerCaptures)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn AddHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
        handledeventstoo: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).AddHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn RemoveHandler<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::RoutedEvent>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IInspectable>,
    >(
        &self,
        routedevent: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).RemoveHandler)(
                ::core::mem::transmute_copy(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Media'*"]
    #[cfg(feature = "UI_Xaml_Media")]
    pub fn TransformToVisual<'a, Param0: ::windows::core::IntoParam<'a, super::UIElement>>(
        &self,
        visual: Param0,
    ) -> ::windows::core::Result<super::Media::GeneralTransform> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).TransformToVisual)(
                ::core::mem::transmute_copy(this),
                visual.into_param().abi(),
                &mut result__,
            )
            .from_abi::<super::Media::GeneralTransform>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateMeasure(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateMeasure)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn InvalidateArrange(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).InvalidateArrange)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn UpdateLayout(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).UpdateLayout)(::core::mem::transmute_copy(
                this,
            ))
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn CancelDirectManipulations(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).CancelDirectManipulations)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn StartDragAsync<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::PointerPoint>,
    >(
        &self,
        pointerpoint: Param0,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    > {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).StartDragAsync)(
                ::core::mem::transmute_copy(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<
                ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
            >>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoView(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoView)(
                ::core::mem::transmute_copy(this),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn StartBringIntoViewWithOptions<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::BringIntoViewOptions>,
    >(
        &self,
        options: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::core::mem::transmute_copy(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Xaml_Input'*"]
    #[cfg(feature = "UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::Input::ProcessKeyboardAcceleratorEventArgs>,
    >(
        &self,
        args: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::core::mem::transmute_copy(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes'*"]
    pub fn Focus(&self, value: super::FocusState) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            let mut result__: bool = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).Focus)(
                ::core::mem::transmute_copy(this),
                value,
                &mut result__,
            )
            .from_abi::<bool>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StartAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StartAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn StopAnimation<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Composition::ICompositionAnimationBase>,
    >(
        &self,
        animation: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElement>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).StopAnimation)(
                ::core::mem::transmute_copy(this),
                animation.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows::core::Result<super::super::Input::InputCursor> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).ProtectedCursor)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Input::InputCursor>(result__)
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Input'*"]
    #[cfg(feature = "UI_Input")]
    pub fn SetProtectedCursor<
        'a,
        Param0: ::windows::core::IntoParam<'a, super::super::Input::InputCursor>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::IUIElementProtected>(self)?;
        unsafe {
            (::windows::core::Interface::vtable(this).SetProtectedCursor)(
                ::core::mem::transmute_copy(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: 'UI_Xaml_Shapes', 'UI_Composition'*"]
    #[cfg(feature = "UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<super::super::Composition::Visual> {
        let this =
            &::windows::core::Interface::cast::<super::super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
            (::windows::core::Interface::vtable(this).GetVisualInternal)(
                ::core::mem::transmute_copy(this),
                &mut result__,
            )
            .from_abi::<super::super::Composition::Visual>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IShapeStatics<R, F: FnOnce(&IShapeStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static mut SHARED: ::windows::core::FactoryCache<Shape, IShapeStatics> =
            ::windows::core::FactoryCache::new();
        unsafe { SHARED.call(callback) }
    }
}
impl ::core::clone::Clone for Shape {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Shape {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Shape {}
impl ::core::fmt::Debug for Shape {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Shape").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Shape {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Shapes.Shape;{9941aad3-6af2-5ba2-9085-8506d5f2485e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Interface for Shape {
    type Vtable = IShape_Vtbl;
    const IID: ::windows::core::GUID = <IShape as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Shape {
    const NAME: &'static str = "Microsoft.UI.Xaml.Shapes.Shape";
}
impl ::core::convert::From<Shape> for ::windows::core::IUnknown {
    fn from(value: Shape) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Shape> for ::windows::core::IUnknown {
    fn from(value: &Shape) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &'a Shape {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<Shape> for ::windows::core::IInspectable {
    fn from(value: Shape) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&Shape> for ::windows::core::IInspectable {
    fn from(value: &Shape) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IInspectable> for &'a Shape {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IInspectable> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Shape> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Shape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Shape> for super::super::Composition::IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Shape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IAnimationObject> for &Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IAnimationObject> {
        ::core::convert::TryInto::<super::super::Composition::IAnimationObject>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Shape> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: Shape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Shape> for super::super::Composition::IVisualElement {
    type Error = ::windows::core::Error;
    fn try_from(value: &Shape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement> for &Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<Shape> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: Shape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "UI_Composition")]
impl ::core::convert::TryFrom<&Shape> for super::super::Composition::IVisualElement2 {
    type Error = ::windows::core::Error;
    fn try_from(value: &Shape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
#[cfg(feature = "UI_Composition")]
impl<'a> ::windows::core::IntoParam<'a, super::super::Composition::IVisualElement2> for &Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::super::Composition::IVisualElement2> {
        ::core::convert::TryInto::<super::super::Composition::IVisualElement2>::try_into(self)
            .map(::windows::core::Param::Owned)
            .unwrap_or(::windows::core::Param::None)
    }
}
impl ::core::convert::From<Shape> for super::FrameworkElement {
    fn from(value: Shape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Shape> for super::FrameworkElement {
    fn from(value: &Shape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::FrameworkElement> for &Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::FrameworkElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::FrameworkElement>::into(self))
    }
}
impl ::core::convert::From<Shape> for super::UIElement {
    fn from(value: Shape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Shape> for super::UIElement {
    fn from(value: &Shape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::UIElement> for &Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::UIElement> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::UIElement>::into(self))
    }
}
impl ::core::convert::From<Shape> for super::DependencyObject {
    fn from(value: Shape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Shape> for super::DependencyObject {
    fn from(value: &Shape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::IntoParam::into_param(&self)
    }
}
impl<'a> ::windows::core::IntoParam<'a, super::DependencyObject> for &Shape {
    fn into_param(self) -> ::windows::core::Param<'a, super::DependencyObject> {
        ::windows::core::Param::Owned(::core::convert::Into::<super::DependencyObject>::into(self))
    }
}
unsafe impl ::core::marker::Send for Shape {}
unsafe impl ::core::marker::Sync for Shape {}
#[cfg(feature = "implement")]
::core::include!("impl.rs");
