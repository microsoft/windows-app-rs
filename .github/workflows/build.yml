name: Build and Test

on:
  pull_request:
  push:
    branches:
      - master
env:
  RUSTFLAGS: -Dwarnings

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
        - os: windows-2019
          rust: nightly
          target: x86_64-pc-windows-msvc
        - os: windows-2019
          rust: stable
          target: i686-pc-windows-msvc
        - os: windows-2019
          rust: nightly
          target: i686-pc-windows-msvc
        - os: windows-2019
          rust: stable
          target: x86_64-pc-windows-gnu
        - os: windows-2019
          rust: nightly
          target: i686-pc-windows-gnu
    steps:
    - uses: actions/checkout@v2
    - run: rustup update --no-self-update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
    - run: rustup target add ${{ matrix.target }}
    
    - name: Configure Cargo for GNU toolchain
      shell: pwsh
      run: |
        Add-Content $env:USERPROFILE\.cargo\config @"
            [target.x86_64-pc-windows-gnu]
            linker = `"C:\\msys64\\mingw64\\bin\\x86_64-w64-mingw32-gcc.exe`"
            ar = `"C:\\msys64\\mingw64\\bin\\ar.exe`"
            [target.i686-pc-windows-gnu]
            linker = `"C:\\msys64\\mingw32\\bin\\i686-w64-mingw32-gcc.exe`"
            ar = `"C:\\msys64\\mingw32\\bin\\ar.exe`"
        "@
      if: contains(matrix.target, 'windows-gnu')

    - name: Configure environment
      shell: pwsh
      run: |
        switch -Wildcard ("${{ matrix.target }}")
        {
          "i686-pc-windows-gnu"
          {
            "C:\msys64\mingw32\bin" >> $env:GITHUB_PATH
          }
          "x86_64-pc-windows-gnu"
          {
            "C:\msys64\mingw64\bin" >> $env:GITHUB_PATH
          }
          "i686*"
          {
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x86" >> $env:GITHUB_PATH
            ((Resolve-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx86\x86")
              | Sort-Object -Descending | Select -First 1).ToString() >> $env:GITHUB_PATH
          }
          "x86_64*"
          {
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64" >> $env:GITHUB_PATH
            ((Resolve-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64")
              | Sort-Object -Descending | Select -First 1).ToString() >> $env:GITHUB_PATH
          }
          "*"
          {
            (Join-Path $env:GITHUB_WORKSPACE "target\debug\deps").ToString() >> $env:GITHUB_PATH
            (Join-Path $env:GITHUB_WORKSPACE "target\test\debug\deps").ToString() >> $env:GITHUB_PATH
            "INCLUDE=C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\winrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\cppwinrt" `
              >> $env:GITHUB_ENV
          }
        }

    - name: windows-app build
      run: cargo test --workspace --target ${{ matrix.target }} --exclude sample_xamlapp

  cargo_fmt:
    runs-on: windows-2019
    name: Check cargo formatting
    steps:
    - uses: actions/checkout@v2
    - name: Run cargo fmt
      run: cargo fmt --all -- --check

  cargo_doc:
    runs-on: windows-2019
    name: Check cargo docs
    steps:
    - uses: actions/checkout@v2
    - name: Run cargo doc
      run: cargo doc --no-deps --workspace --exclude sample_xamlapp